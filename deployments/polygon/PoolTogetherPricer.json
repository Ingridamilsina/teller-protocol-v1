{
  "address": "0x3D2B9eb9F4cf8664861c1E346352a6D11f83A98D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "saLPToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "saLPToken",
          "type": "address"
        }
      ],
      "name": "getRateFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "saLPToken",
          "type": "address"
        }
      ],
      "name": "getUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "saLPToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "artifactName": "PoolTogetherPricer",
  "transactionHash": "0x61cd3cf997e3c0c0eabfe7d2d851239e193993720c410d9e9b5c73e195c64bf5",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x3D2B9eb9F4cf8664861c1E346352a6D11f83A98D",
    "transactionIndex": 51,
    "gasUsed": "225950",
    "logsBloom": "0x
    "blockHash": "0x73b90f94a99e3766df541de7d9d058b57e6207dbccc275acb56d8c3fc01c6900",
    "transactionHash": "0x61cd3cf997e3c0c0eabfe7d2d851239e193993720c410d9e9b5c73e195c64bf5",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 16863232,
        "transactionHash": "0x61cd3cf997e3c0c0eabfe7d2d851239e193993720c410d9e9b5c73e195c64bf5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000afe87013dc96ede1e116a288d80fcaa0effe5fe5",
          "0x0000000000000000000000002c74ca71679cf1299936d6104d825c965448907b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000080700d6deb80000000000000000000000000000000000000000000000001c0560841cab773cdf00000000000000000000000000000000000000000000002c5c7504b16ed7c41600000000000000000000000000000000000000000000001c05587d1bd49884df00000000000000000000000000000000000000000000002c5c7d0bb245b67c16",
        "logIndex": 134,
        "blockHash": "0x73b90f94a99e3766df541de7d9d058b57e6207dbccc275acb56d8c3fc01c6900"
      }
    ],
    "blockNumber": 16863232,
    "cumulativeGasUsed": "5738551",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b5f251bb9db269a299bc010c3a1160db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saLPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saLPToken\",\"type\":\"address\"}],\"name\":\"getRateFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saLPToken\",\"type\":\"address\"}],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saLPToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBalanceOfUnderlying(address,address)\":{\"params\":{\"account\":\"Address of the account to get the balance of.\",\"saLPToken\":\"Address of the single asset liquidity provider token.\"},\"returns\":{\"_0\":\"Balance of the underlying asset.\"}},\"getRateFor(address)\":{\"details\":\"The exchange ratio for Aave tokens is always 1:1, however the token balance is compounded silently  using an index at the time of their last deposit. See {AavePricer.getBalanceOfUnderlying}\",\"params\":{\"saLPToken\":\"address of the single asset liquidity provider token.\"},\"returns\":{\"_0\":\"Exchange rate for 1 saLP token in the underlying asset.\"}},\"getUnderlying(address)\":{\"details\":\"cETH is the only Compound token that does not support the {underlying} function.\",\"params\":{\"saLPToken\":\"address of the Compound token.\"},\"returns\":{\"_0\":\"address of the underlying saLPToken asset.\"}},\"getValueOf(address,uint256)\":{\"details\":\"The value of an Aave token is always the same as the underlying asset amount. See {AavePricer.getRateFor}\",\"params\":{\"amount\":\"Amount of the token to convert into the underlying asset.\",\"saLPToken\":\"address of the single asset liquidity provider token\"},\"returns\":{\"_0\":\"Value of the saLP token in the underlying asset.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBalanceOfUnderlying(address,address)\":{\"notice\":\"It calculates the balance of the underlying asset for {account}.\"},\"getRateFor(address)\":{\"notice\":\"It returns the exchange rate of the aToken to the underlying asset.\"},\"getUnderlying(address)\":{\"notice\":\"Gets the underlying asset address for the Compound token.\"},\"getValueOf(address,uint256)\":{\"notice\":\"It calculates the value of the protocol token amount into the underlying asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price-aggregator/pricers/PoolTogetherPricer.sol\":\"PoolTogetherPricer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/price-aggregator/IsaLPPricer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IsaLPPricer {\\n    /**\\n     * @notice It returns the exchange rate of the single asset liquidity provider token.\\n     * @param saLPToken address of the single asset liquidity provider token.\\n     * @return Exchange rate for 1 saLP token in the underlying asset.\\n     */\\n    function getRateFor(address saLPToken) external view returns (uint256);\\n\\n    /**\\n     * @notice It calculates the value of the protocol token amount into the underlying asset.\\n     * @param saLPToken address of the single asset liquidity provider token\\n     * @param amount Amount of the token to convert into the underlying asset.\\n     * @return Value of the saLP token in the underlying asset.\\n     */\\n    function getValueOf(address saLPToken, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice It calculates the balance of the underlying asset for {account}.\\n     * @param saLPToken Address of the single asset liquidity provider token.\\n     * @param account Address of the account to get the balance of.\\n     * @return Balance of the underlying asset.\\n     */\\n    function getBalanceOfUnderlying(address saLPToken, address account)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Gets the underlying asset address for the {saLPToken}.\\n     * @param saLPToken address of the single asset liquidity provider token.\\n     * @return Address of the underlying asset.\\n     */\\n    function getUnderlying(address saLPToken) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa37ad64548debbbef687af3809e9c51bb46c8e4d2e4b18c009625b96fc7ba96e\",\"license\":\"MIT\"},\"contracts/price-aggregator/pricers/PoolTogetherPricer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport { IsaLPPricer } from \\\"../IsaLPPricer.sol\\\";\\nimport { PrizePoolInterface } from \\\"../../shared/interfaces/pooltogether/PrizePoolInterface.sol\\\";\\nimport { IControlledToken } from \\\"../../shared/interfaces/pooltogether/IControlledToken.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract PoolTogetherPricer is IsaLPPricer {\\n    // TODO: not currently being used\\n    /**\\n     * @notice It returns the exchange rate of the aToken to the underlying asset.\\n     * @dev The exchange ratio for Aave tokens is always 1:1, however the token balance is compounded silently\\n     *  using an index at the time of their last deposit. See {AavePricer.getBalanceOfUnderlying}\\n     * @param saLPToken address of the single asset liquidity provider token.\\n     * @return Exchange rate for 1 saLP token in the underlying asset.\\n     */\\n    function getRateFor(address saLPToken)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return 0;\\n    }\\n\\n    // TODO: not currently being used\\n    /**\\n     * @notice It calculates the value of the protocol token amount into the underlying asset.\\n     * @dev The value of an Aave token is always the same as the underlying asset amount. See {AavePricer.getRateFor}\\n     * @param saLPToken address of the single asset liquidity provider token\\n     * @param amount Amount of the token to convert into the underlying asset.\\n     * @return Value of the saLP token in the underlying asset.\\n     */\\n    function getValueOf(address saLPToken, uint256 amount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice It calculates the balance of the underlying asset for {account}.\\n     * @param saLPToken Address of the single asset liquidity provider token.\\n     * @param account Address of the account to get the balance of.\\n     * @return Balance of the underlying asset.\\n     */\\n    function getBalanceOfUnderlying(address saLPToken, address account)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        return _getPrizePool(saLPToken).balanceOfCredit(account, saLPToken);\\n    }\\n\\n    /**\\n     * @notice Gets the underlying asset address for the Compound token.\\n     * @dev cETH is the only Compound token that does not support the {underlying} function.\\n     * @param saLPToken address of the Compound token.\\n     * @return address of the underlying saLPToken asset.\\n     */\\n    function getUnderlying(address saLPToken)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _getPrizePool(saLPToken).token();\\n    }\\n\\n    function _getPrizePool(address saLPToken)\\n        private\\n        view\\n        returns (PrizePoolInterface)\\n    {\\n        return IControlledToken(saLPToken).controller();\\n    }\\n}\\n\",\"keccak256\":\"0x55fabe43592b32bae97e12b7b421180b85601d6117cb09cecafad6e9a6d7844f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/pooltogether/IControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport { PrizePoolInterface } from \\\"./PrizePoolInterface.sol\\\";\\n\\ninterface IControlledToken {\\n    function controller() external view returns (PrizePoolInterface);\\n}\\n\",\"keccak256\":\"0xda1a5a326747ea280817d4af2a52d9a8efb18b62b6e2d9c30c6d31c36c74c9fd\",\"license\":\"MIT\"},\"contracts/shared/interfaces/pooltogether/PrizePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.  Users deposit and withdraw from this contract to participate in Prize Pool.\\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\ninterface PrizePoolInterface {\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    /// @param controlledToken The address of the type of token the user is minting\\n    /// @param referrer The referrer of the deposit\\n    function depositTo(\\n        address to,\\n        uint256 amount,\\n        address controlledToken,\\n        address referrer\\n    ) external;\\n\\n    /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\\n    /// @param from The address to redeem tokens from.\\n    /// @param amount The amount of tokens to redeem for assets.\\n    /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\\n    /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This should be pre-calculated by the calculateExitFee() fxn.\\n    /// @return The actual exit fee paid\\n    function withdrawInstantlyFrom(\\n        address from,\\n        uint256 amount,\\n        address controlledToken,\\n        uint256 maximumExitFee\\n    ) external returns (uint256);\\n\\n    /// @notice Returns the balance that is available to award.\\n    /// @dev captureAwardBalance() should be called first\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function awardBalance() external view returns (uint256);\\n\\n    /// @notice Calculates the early exit fee for the given amount\\n    /// @param from The user who is withdrawing\\n    /// @param controlledToken The type of collateral being withdrawn\\n    /// @param amount The amount of collateral to be withdrawn\\n    /// @return exitFee The exit fee\\n    /// @return burnedCredit The user's credit that was burned\\n    function calculateEarlyExitFee(\\n        address from,\\n        address controlledToken,\\n        uint256 amount\\n    ) external returns (uint256 exitFee, uint256 burnedCredit);\\n\\n    /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\\n    /// @param _principal The principal amount on which interest is accruing\\n    /// @param _interest The amount of interest that must accrue\\n    /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\\n    function estimateCreditAccrualTime(\\n        address _controlledToken,\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external view returns (uint256 durationSeconds);\\n\\n    /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\\n    /// @param user The user whose credit balance should be returned\\n    /// @return The balance of the users credit\\n    function balanceOfCredit(address user, address controlledToken)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Returns the credit rate of a controlled token\\n    /// @param controlledToken The controlled token to retrieve the credit rates for\\n    /// @return creditLimitMantissa The credit limit fraction.  This number is used to calculate both the credit limit and early exit fee.\\n    /// @return creditRateMantissa The credit rate. This is the amount of tokens that accrue per second.\\n    function creditPlanOf(address controlledToken)\\n        external\\n        view\\n        returns (uint128 creditLimitMantissa, uint128 creditRateMantissa);\\n\\n    /// @dev Returns the address of the underlying ERC20 asset\\n    /// @return The address of the asset\\n    function token() external view returns (address);\\n\\n    /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\\n    /// @return An array of controlled token addresses\\n    function tokens() external view returns (address[] memory);\\n\\n    /// @notice The total of all controlled tokens and timelock.\\n    /// @return The current total of all tokens and timelock.\\n    function accountedBalance() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x050cea53e1d5563980c735230712fc81b1f31fc476f9cbd31dde6ce1a0bb3725\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610320806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806305a933221461005157806334fb2078146100785780634e89a7111461008e578063727ae400146100b9575b600080fd5b61006561005f36600461021f565b50600090565b6040519081526020015b60405180910390f35b61006561008636600461028f565b600092915050565b6100a161009c36600461021f565b6100cc565b6040516001600160a01b03909116815260200161006f565b6100656100c7366004610257565b61014d565b60006100d7826101e4565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561010f57600080fd5b505afa158015610123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610147919061023b565b92915050565b6000610158836101e4565b60405163494de9f760e01b81526001600160a01b0384811660048301528581166024830152919091169063494de9f790604401602060405180830381600087803b1580156101a557600080fd5b505af11580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906102ba565b9392505050565b6000816001600160a01b031663f77c47916040518163ffffffff1660e01b815260040160206040518083038186803b15801561010f57600080fd5b600060208284031215610230578081fd5b81356101dd816102d2565b60006020828403121561024c578081fd5b81516101dd816102d2565b60008060408385031215610269578081fd5b8235610274816102d2565b91506020830135610284816102d2565b809150509250929050565b600080604083850312156102a1578182fd5b82356102ac816102d2565b946020939093013593505050565b6000602082840312156102cb578081fd5b5051919050565b6001600160a01b03811681146102e757600080fd5b5056fea2646970667358221220a66e037edbda2992335911a92a3b8f8caa47b58903c91da14cc48807bf25d23164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806305a933221461005157806334fb2078146100785780634e89a7111461008e578063727ae400146100b9575b600080fd5b61006561005f36600461021f565b50600090565b6040519081526020015b60405180910390f35b61006561008636600461028f565b600092915050565b6100a161009c36600461021f565b6100cc565b6040516001600160a01b03909116815260200161006f565b6100656100c7366004610257565b61014d565b60006100d7826101e4565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561010f57600080fd5b505afa158015610123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610147919061023b565b92915050565b6000610158836101e4565b60405163494de9f760e01b81526001600160a01b0384811660048301528581166024830152919091169063494de9f790604401602060405180830381600087803b1580156101a557600080fd5b505af11580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906102ba565b9392505050565b6000816001600160a01b031663f77c47916040518163ffffffff1660e01b815260040160206040518083038186803b15801561010f57600080fd5b600060208284031215610230578081fd5b81356101dd816102d2565b60006020828403121561024c578081fd5b81516101dd816102d2565b60008060408385031215610269578081fd5b8235610274816102d2565b91506020830135610284816102d2565b809150509250929050565b600080604083850312156102a1578182fd5b82356102ac816102d2565b946020939093013593505050565b6000602082840312156102cb578081fd5b5051919050565b6001600160a01b03811681146102e757600080fd5b5056fea2646970667358221220a66e037edbda2992335911a92a3b8f8caa47b58903c91da14cc48807bf25d23164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBalanceOfUnderlying(address,address)": {
        "params": {
          "account": "Address of the account to get the balance of.",
          "saLPToken": "Address of the single asset liquidity provider token."
        },
        "returns": {
          "_0": "Balance of the underlying asset."
        }
      },
      "getRateFor(address)": {
        "details": "The exchange ratio for Aave tokens is always 1:1, however the token balance is compounded silently  using an index at the time of their last deposit. See {AavePricer.getBalanceOfUnderlying}",
        "params": {
          "saLPToken": "address of the single asset liquidity provider token."
        },
        "returns": {
          "_0": "Exchange rate for 1 saLP token in the underlying asset."
        }
      },
      "getUnderlying(address)": {
        "details": "cETH is the only Compound token that does not support the {underlying} function.",
        "params": {
          "saLPToken": "address of the Compound token."
        },
        "returns": {
          "_0": "address of the underlying saLPToken asset."
        }
      },
      "getValueOf(address,uint256)": {
        "details": "The value of an Aave token is always the same as the underlying asset amount. See {AavePricer.getRateFor}",
        "params": {
          "amount": "Amount of the token to convert into the underlying asset.",
          "saLPToken": "address of the single asset liquidity provider token"
        },
        "returns": {
          "_0": "Value of the saLP token in the underlying asset."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBalanceOfUnderlying(address,address)": {
        "notice": "It calculates the balance of the underlying asset for {account}."
      },
      "getRateFor(address)": {
        "notice": "It returns the exchange rate of the aToken to the underlying asset."
      },
      "getUnderlying(address)": {
        "notice": "Gets the underlying asset address for the Compound token."
      },
      "getValueOf(address,uint256)": {
        "notice": "It calculates the value of the protocol token amount into the underlying asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}