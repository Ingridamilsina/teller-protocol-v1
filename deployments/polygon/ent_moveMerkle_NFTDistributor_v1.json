{
  "address": "0x9f972C973615d2d2cfcd23F2528F65A289FefE29",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tierIndex",
          "type": "uint256"
        }
      ],
      "name": "moveMerkle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "artifactName": "ent_moveMerkle_NFTDistributor_v1",
  "transactionHash": "0xfb29f58d12a41817ea2f3f72fc29a8b8a23690de1f2b86e05eca6c157d81a0ee",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x9f972C973615d2d2cfcd23F2528F65A289FefE29",
    "transactionIndex": 0,
    "gasUsed": "150697",
    "logsBloom": "0x00000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800100000000000000000100000000000000000000000002000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000010000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000100000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000040000100000",
    "blockHash": "0x449afe5fcec8162639c2a7897aeb88e91462dcc9173951a70210e93ec3754e98",
    "transactionHash": "0xfb29f58d12a41817ea2f3f72fc29a8b8a23690de1f2b86e05eca6c157d81a0ee",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16862164,
        "transactionHash": "0xfb29f58d12a41817ea2f3f72fc29a8b8a23690de1f2b86e05eca6c157d81a0ee",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000afe87013dc96ede1e116a288d80fcaa0effe5fe5",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012bd08c8614e00000000000000000000000000000000000000000000000004d841017a9217902300000000000000000000000000000000000000000000127ce7c182ea0a682513000000000000000000000000000000000000000000000004d82e4471c9b6422300000000000000000000000000000000000000000000127ce7d43ff2d2c97313",
        "logIndex": 0,
        "blockHash": "0x449afe5fcec8162639c2a7897aeb88e91462dcc9173951a70210e93ec3754e98"
      }
    ],
    "blockNumber": 16862164,
    "cumulativeGasUsed": "150697",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b5f251bb9db269a299bc010c3a1160db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"}],\"name\":\"moveMerkle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"moveMerkle(uint256,uint256)\":{\"params\":{\"index\":\"Index of merkle to set.\",\"tierIndex\":\"Index of NFT tier to assign merkle for. Requirements:  - Caller must be an admin\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"moveMerkle(uint256,uint256)\":{\"notice\":\"Change a merkle to be for a different tier to be able to claim NFTs.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/distributor/entry/move-merkle.sol\":\"ent_moveMerkle_NFTDistributor_v1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/contexts/access-control/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nlibrary AccessControlEvents {\\n    event OwnerSet(address indexed owner);\\n\\n    event OwnerTransferred(address indexed owner, address indexed prevOwner);\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xe810f81cc2c393f9f7df19841cae3cb78ac914c5501238713d6c62192ac026a9\",\"license\":\"MIT\"},\"contracts/contexts/access-control/internal/has-role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../storage/roles.sol\\\";\\n\\nabstract contract int_hasRole_AccessControl_v1 is sto_AccessControl_Roles {\\n    function _hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool hasRole_)\\n    {\\n        hasRole_ = accessControlRolesStore().roles[role].members[account];\\n    }\\n}\\n\",\"keccak256\":\"0x631c0c260f7de64c32a205405e3ec424a6b34aec27987ced91a0254fdabfb1a7\",\"license\":\"MIT\"},\"contracts/contexts/access-control/internal/require-authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./has-role.sol\\\";\\n\\nabstract contract int_requireAuthorization_AccessControl_v1 is\\n    int_hasRole_AccessControl_v1\\n{\\n    function _requireAuthorization(bytes32 role, address account)\\n        internal\\n        view\\n    {\\n        require(_hasRole(role, account), \\\"AccessControl: unauthorized\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5c3bc56480df5bf9e9d37962f00dc46ddd4df10e8eddcb45a8ad6c9538c86d67\",\"license\":\"MIT\"},\"contracts/contexts/access-control/modifiers/authorized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    int_requireAuthorization_AccessControl_v1\\n} from \\\"../internal/require-authorization.sol\\\";\\n\\nabstract contract mod_authorized_AccessControl_v1 is\\n    int_requireAuthorization_AccessControl_v1\\n{\\n    modifier authorized(bytes32 role, address account) {\\n        _requireAuthorization(role, account);\\n        _;\\n    }\\n}\\n\\nabstract contract mod_authorized_AccessControl is\\n    mod_authorized_AccessControl_v1\\n{}\\n\",\"keccak256\":\"0x07b59ca25af7579afacf46fd29c611a89928dc3df8381f6a3dd5ba8ded407d61\",\"license\":\"MIT\"},\"contracts/contexts/access-control/storage/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RoleData } from \\\"../data.sol\\\";\\n\\ncontract sto_AccessControl_Roles {\\n    bytes32 internal constant POS =\\n        keccak256(\\\"teller_protocol.storage.access_control.roles\\\");\\n\\n    struct AccessControlRolesStorage {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    function accessControlRolesStore()\\n        internal\\n        pure\\n        returns (AccessControlRolesStorage storage s)\\n    {\\n        bytes32 position = POS;\\n\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3173b189dddc069a22ac5a5f2d411305846c9de523f8ce279b7219f2ee51470\",\"license\":\"MIT\"},\"contracts/nft/IStakeableNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStakeableNFT {\\n    function tokenBaseLoanSize(uint256 tokenId) external view returns (uint256);\\n\\n    function tokenURIHash(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function tokenContributionAsset(uint256 tokenId)\\n        external\\n        view\\n        returns (address);\\n\\n    function tokenContributionSize(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenContributionMultiplier(uint256 tokenId)\\n        external\\n        view\\n        returns (uint8);\\n}\\n\",\"keccak256\":\"0xfbf44350ad91a54de26f39195d714580d7dade556ea4c7991a51eef5aa839105\",\"license\":\"MIT\"},\"contracts/nft/ITellerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ITellerNFT {\\n    struct Tier {\\n        uint256 baseLoanSize;\\n        string[] hashes;\\n        address contributionAsset;\\n        uint256 contributionSize;\\n        uint8 contributionMultiplier;\\n    }\\n\\n    /**\\n     * @notice The contract metadata URI.\\n     * @return the contractURI in string\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice It returns information about a Tier with from a tier index\\n     * @param index Tier index to get info.\\n     * @return tier_ the tier which belongs to the respective index\\n     */\\n    function getTier(uint256 index) external view returns (Tier memory tier_);\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param tokenId ID of the token to get Tier info.\\n     * @return index_ the index of the tier the tokenID belongs in\\n     * @return tier_ the tier where the tokenID belongs in\\n     */\\n    function getTokenTier(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 index_, Tier memory tier_);\\n\\n    /**\\n     * @notice It returns an array of hashes in a tier\\n     * @param tierIndex the tier index to get the tier hashes\\n     * @return hashes_ all the tokenID hashes\\n     */\\n    function getTierHashes(uint256 tierIndex)\\n        external\\n        view\\n        returns (string[] memory hashes_);\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     * @return owned the array of tokenIDs owned by the address\\n     */\\n    function getOwnedTokens(address owner)\\n        external\\n        view\\n        returns (uint256[] memory owned);\\n\\n    /**\\n     * @notice It mints a new token for a Tier index.\\n     * @param tierIndex the tier index to mint the token in\\n     * @param owner the owner of the new token\\n     * Requirements:\\n     *  - Caller must be an authorized minter\\n     */\\n    function mint(uint256 tierIndex, address owner) external;\\n\\n    /**\\n     * @notice Adds a new Tier to be minted with the given information.\\n     * @dev It auto increments the index of the next tier to add.\\n     * @param newTier Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {MINTER} role\\n     */\\n    function addTier(Tier memory newTier) external;\\n\\n    /**\\n     * @notice Sets the contract level metadata URI hash.\\n     * @param contractURIHash The hash to the initial contract level metadata.\\n     */\\n    function setContractURIHash(string memory contractURIHash) external;\\n\\n    /**\\n     * @notice Initializes the TellerNFT.\\n     * @param minters The addresses that should allowed to mint tokens.\\n     */\\n    function initialize(address[] calldata minters) external;\\n}\\n\",\"keccak256\":\"0x39eb585b176c0ed9b155976fb6396827902f68366c1a91d23548758058509288\",\"license\":\"MIT\"},\"contracts/nft/TellerNFTDictionary.sol\":{\"content\":\"/**\\n * @notice TellerNFTDictionary Version 1.02\\n *\\n * @notice This contract is used to gather data for TellerV1 NFTs more efficiently.\\n * @notice This contract has data which must be continuously synchronized with the TellerV1 NFT data\\n *\\n * @author develop@teller.finance\\n */\\n\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IStakeableNFT.sol\\\";\\n\\n/**\\n * @notice This contract is used by borrowers to call Dapp functions (using delegate calls).\\n * @notice This contract should only be constructed using it's upgradeable Proxy contract.\\n * @notice In order to call a Dapp function, the Dapp must be added in the DappRegistry instance.\\n *\\n * @author develop@teller.finance\\n */\\ncontract TellerNFTDictionary is IStakeableNFT, AccessControlUpgradeable {\\n    struct Tier {\\n        uint256 baseLoanSize;\\n        string[] hashes;\\n        address contributionAsset;\\n        uint256 contributionSize;\\n        uint8 contributionMultiplier;\\n    }\\n\\n    mapping(uint256 => uint256) public baseLoanSizes;\\n    mapping(uint256 => string[]) public hashes;\\n    mapping(uint256 => address) public contributionAssets;\\n    mapping(uint256 => uint256) public contributionSizes;\\n    mapping(uint256 => uint8) public contributionMultipliers;\\n\\n    /* Constants */\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\n    /* State Variables */\\n\\n    mapping(uint256 => uint256) public _tokenTierMappingCompressed;\\n    bool public _tokenTierMappingCompressedSet;\\n\\n    /* Modifiers */\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, _msgSender()), \\\"TellerNFTDictionary: not admin\\\");\\n        _;\\n    }\\n\\n    function initialize(address initialAdmin) public {\\n        _setupRole(ADMIN, initialAdmin);\\n        _setRoleAdmin(ADMIN, ADMIN);\\n\\n        __AccessControl_init();\\n    }\\n\\n    /* External Functions */\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param tokenId ID of the token to get Tier info.\\n     */\\n    function getTokenTierIndex(uint256 tokenId)\\n        public\\n        view\\n        returns (uint8 index_)\\n    {\\n        //32 * 8 = 256 - each uint256 holds the data of 32 tokens . 8 bits each.\\n\\n        uint256 mappingIndex = tokenId / 32;\\n\\n        uint256 compressedRegister = _tokenTierMappingCompressed[mappingIndex];\\n\\n        //use 31 instead of 32 to account for the '0x' in the start.\\n        //the '31 -' reverses our bytes order which is necessary\\n\\n        uint256 offset = ((31 - (tokenId % 32)) * 8);\\n\\n        uint8 tierIndex = uint8((compressedRegister >> offset));\\n\\n        return tierIndex;\\n    }\\n\\n    function getTierHashes(uint256 tierIndex)\\n        external\\n        view\\n        returns (string[] memory)\\n    {\\n        return hashes[tierIndex];\\n    }\\n\\n    /**\\n     * @notice Adds a new Tier to be minted with the given information.\\n     * @dev It auto increments the index of the next tier to add.\\n     * @param newTier Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setTier(uint256 index, Tier memory newTier)\\n        external\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        baseLoanSizes[index] = newTier.baseLoanSize;\\n        hashes[index] = newTier.hashes;\\n        contributionAssets[index] = newTier.contributionAsset;\\n        contributionSizes[index] = newTier.contributionSize;\\n        contributionMultipliers[index] = newTier.contributionMultiplier;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets the tiers for each tokenId using compressed data.\\n     * @param tiersMapping Information about the new tiers to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setAllTokenTierMappings(uint256[] memory tiersMapping)\\n        public\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        require(\\n            !_tokenTierMappingCompressedSet,\\n            \\\"TellerNFTDictionary: token tier mapping already set\\\"\\n        );\\n        for (uint256 i = 0; i < tiersMapping.length; i++) {\\n            _tokenTierMappingCompressed[i] = tiersMapping[i];\\n        }\\n\\n        _tokenTierMappingCompressedSet = true;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets the tiers for each tokenId using compressed data.\\n     * @param index the mapping row, each holds data for 32 tokens\\n     * @param tierMapping Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setTokenTierMapping(uint256 index, uint256 tierMapping)\\n        public\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        _tokenTierMappingCompressed[index] = tierMapping;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets a specific tier for a specific tokenId using compressed data.\\n     * @param tokenIds the NFT token Ids for which to add data\\n     * @param tokenTier the index of the tier that these tokenIds should have\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setTokenTierForTokenIds(\\n        uint256[] calldata tokenIds,\\n        uint256 tokenTier\\n    ) public onlyAdmin returns (bool) {\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            setTokenTierForTokenId(tokenIds[i], tokenTier);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets a specific tier for a specific tokenId using compressed data.\\n     * @param tokenId the NFT token Id for which to add data\\n     * @param tokenTier the index of the tier that these tokenIds should have\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setTokenTierForTokenId(uint256 tokenId, uint256 tokenTier)\\n        public\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        uint256 mappingIndex = tokenId / 32;\\n\\n        uint256 existingRegister = _tokenTierMappingCompressed[mappingIndex];\\n\\n        uint256 offset = ((31 - (tokenId % 32)) * 8);\\n\\n        uint256 updateMaskShifted =\\n            0x00000000000000000000000000000000000000000000000000000000000000FF <<\\n                offset;\\n\\n        uint256 updateMaskShiftedNegated = ~updateMaskShifted;\\n\\n        uint256 tokenTierShifted =\\n            ((0x0000000000000000000000000000000000000000000000000000000000000000 |\\n                tokenTier) << offset);\\n\\n        uint256 existingRegisterClearedWithMask =\\n            existingRegister & updateMaskShiftedNegated;\\n\\n        uint256 updatedRegister =\\n            existingRegisterClearedWithMask | tokenTierShifted;\\n\\n        _tokenTierMappingCompressed[mappingIndex] = updatedRegister;\\n\\n        return true;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IStakeableNFT).interfaceId ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n        New methods for the dictionary\\n    */\\n\\n    /**\\n     * @notice It returns Base Loan Size for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenBaseLoanSize(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        return baseLoanSizes[tokenTier];\\n    }\\n\\n    /**\\n     * @notice It returns Token URI Hash for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenURIHash(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        string[] memory tierImageHashes = hashes[tokenTier];\\n        return tierImageHashes[tokenId % (tierImageHashes.length)];\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Asset for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionAsset(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        return contributionAssets[tokenTier];\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Size for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionSize(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        return contributionSizes[tokenTier];\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Multiplier for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionMultiplier(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint8)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        return contributionMultipliers[tokenTier];\\n    }\\n}\\n\",\"keccak256\":\"0xf33e3fa1f609fdd2abb3b5fb9c232269d13363a3e4fa5697ea96269e361e74fa\"},\"contracts/nft/distributor/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant MINTER = keccak256(\\\"MINTER\\\");\\n\\nstruct MerkleRoot {\\n    bytes32 merkleRoot;\\n    uint256 tierIndex;\\n}\\n\\nstruct ClaimNFTRequest {\\n    uint256 merkleIndex;\\n    uint256 nodeIndex;\\n    uint256 amount;\\n    bytes32[] merkleProof;\\n}\\n\\nlibrary DistributorEvents {\\n    event Claimed(address indexed account);\\n\\n    event MerkleAdded(uint256 index);\\n}\\n\",\"keccak256\":\"0x3d0d14b0ed21ead3c29e3cd4195c5d40fb987bda0e6e4b61a60d8e2c5c1807c3\",\"license\":\"MIT\"},\"contracts/nft/distributor/entry/move-merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../store.sol\\\";\\nimport \\\"../../../contexts/access-control/modifiers/authorized.sol\\\";\\n\\n// Utils\\nimport { DistributorEvents, ADMIN, MerkleRoot } from \\\"../data.sol\\\";\\n\\ncontract ent_moveMerkle_NFTDistributor_v1 is\\n    sto_NFTDistributor,\\n    mod_authorized_AccessControl_v1\\n{\\n    /**\\n     * @notice Change a merkle to be for a different tier to be able to claim NFTs.\\n     * @param index Index of merkle to set.\\n     * @param tierIndex Index of NFT tier to assign merkle for.\\n     *\\n     * Requirements:\\n     *  - Caller must be an admin\\n     */\\n    function moveMerkle(uint256 index, uint256 tierIndex)\\n        external\\n        authorized(ADMIN, msg.sender)\\n    {\\n        MerkleRoot storage merkle = distributorStore().merkleRoots[index];\\n        merkle.tierIndex = tierIndex;\\n    }\\n}\\n\",\"keccak256\":\"0x0e47277c70c01f65f5f89567a647c8d42cc3123cb466c1beffd8bbb436faab53\",\"license\":\"MIT\"},\"contracts/nft/distributor/store.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"../ITellerNFT.sol\\\";\\nimport \\\"../TellerNFTDictionary.sol\\\";\\n\\n// Utils\\nimport { MerkleRoot } from \\\"./data.sol\\\";\\n\\nabstract contract sto_NFTDistributor {\\n    struct DistributorStorage {\\n        ITellerNFT nft;\\n        MerkleRoot[] merkleRoots;\\n        mapping(uint256 => mapping(uint256 => uint256)) claimedBitMap;\\n        TellerNFTDictionary dictionary;\\n    }\\n\\n    bytes32 constant POSITION = keccak256(\\\"teller_nft.distributor\\\");\\n\\n    function distributorStore()\\n        internal\\n        pure\\n        returns (DistributorStorage storage s)\\n    {\\n        bytes32 P = POSITION;\\n        assembly {\\n            s.slot := P\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc4b5c728c22c137e44c8b911105e45d0d85f42cb3a6a2ca31136cb4029d5fc7e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101c3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637b8f569714610030575b600080fd5b61004361003e36600461016c565b610045565b005b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec423361007182826100d3565b60007fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36060010185815481106100b657634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201019390935550505050565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b038516845290915290205460ff166101685760405162461bcd60e51b815260206004820152601b60248201527f416363657373436f6e74726f6c3a20756e617574686f72697a65640000000000604482015260640160405180910390fd5b5050565b6000806040838503121561017e578182fd5b5050803592602090910135915056fea2646970667358221220bc6735edd9660ddbb4d14912a3d4eeb67e6a30aea2cf5e9449bc7fe4536ae8eb64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80637b8f569714610030575b600080fd5b61004361003e36600461016c565b610045565b005b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec423361007182826100d3565b60007fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36060010185815481106100b657634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201019390935550505050565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b038516845290915290205460ff166101685760405162461bcd60e51b815260206004820152601b60248201527f416363657373436f6e74726f6c3a20756e617574686f72697a65640000000000604482015260640160405180910390fd5b5050565b6000806040838503121561017e578182fd5b5050803592602090910135915056fea2646970667358221220bc6735edd9660ddbb4d14912a3d4eeb67e6a30aea2cf5e9449bc7fe4536ae8eb64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "moveMerkle(uint256,uint256)": {
        "params": {
          "index": "Index of merkle to set.",
          "tierIndex": "Index of NFT tier to assign merkle for. Requirements:  - Caller must be an admin"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "moveMerkle(uint256,uint256)": {
        "notice": "Change a merkle to be for a different tier to be able to claim NFTs."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}