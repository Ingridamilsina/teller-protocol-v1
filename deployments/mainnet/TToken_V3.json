{
  "address": "0x164Ac16e514f4e47d201aFF991740E166d409b8A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrowed",
          "type": "uint256"
        }
      ],
      "name": "LoanFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principlePayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestPayment",
          "type": "uint256"
        }
      ],
      "name": "LoanPaymentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategyAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "StrategySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLoanAmount",
          "type": "uint256"
        }
      ],
      "name": "debtRatioFor",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "ratio_",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fundLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupplied",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRepaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalInterestRepaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOnLoan",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isWrappedNative",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "artifactName": "TToken_V3",
  "transactionHash": "0xfd01461dd77f56d2c57decb3d6820808fa5bad9644755c145030cd419947b56a",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x164Ac16e514f4e47d201aFF991740E166d409b8A",
    "transactionIndex": 211,
    "gasUsed": "2647177",
    "logsBloom": "0x
    "blockHash": "0x41b9ff5829bdcb2264f00eaaf81ec785c953cbc0a3717d357c183471a4667579",
    "transactionHash": "0xfd01461dd77f56d2c57decb3d6820808fa5bad9644755c145030cd419947b56a",
    "logs": [],
    "blockNumber": 13679698,
    "cumulativeGasUsed": "18486141",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1be8a6a75d89e8f0cbe5f21c3ec1aa82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"}],\"name\":\"LoanFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principlePayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestPayment\",\"type\":\"uint256\"}],\"name\":\"LoanPaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"StrategySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoanAmount\",\"type\":\"uint256\"}],\"name\":\"debtRatioFor\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"ratio_\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterestRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOnLoan\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWrappedNative\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"develop@teller.finance\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceOfUnderlying(address)\":{\"params\":{\"account\":\"Address to calculate the underlying balance.\"},\"returns\":{\"_0\":\"balance_ the balance of the account\"}},\"currentTVL()\":{\"returns\":{\"tvl_\":\"The value locked in the pool. Note: This value includes the amount that is on loan (including ones that were sent to EOAs).\"}},\"debtRatioFor(uint256)\":{\"params\":{\"newLoanAmount\":\"the new loan amount to consider the StD ratio.\"},\"returns\":{\"ratio_\":\"The debt ratio for lending pool.\"}},\"decimals()\":{\"returns\":{\"_0\":\"decimals of the token\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"exchangeRate()\":{\"returns\":{\"rate_\":\"The current exchange rate, scaled by the EXCHANGE_RATE_FACTOR.\"}},\"fundLoan(address,uint256)\":{\"params\":{\"amount\":\"Funds requested to fulfil the loan.\",\"recipient\":\"The account to send the funds to.\"}},\"getMarketState()\":{\"returns\":{\"totalBorrowed\":\"Total amount borrowed through loans.\",\"totalInterestRepaid\":\"The total amount interest repaid till the current timestamp.\",\"totalOnLoan\":\"Total amount currently deployed in loans.\",\"totalRepaid\":\"The total amount repaid till the current timestamp.\",\"totalSupplied\":\"Total amount of the underlying asset supplied.\"}},\"getStrategy()\":{\"returns\":{\"_0\":\"address of the strategy contract\"}},\"grantRole(bytes32,address)\":{\"params\":{\"account\":\"Address to give the {role} to. Requirements:  - Sender must be role admin.\",\"role\":\"Encoding of the role to give.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"Address to check the {role} for.\",\"role\":\"Encoding of the role to check.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,bool)\":{\"params\":{\"admin\":\"address of the admin to the respective Teller Token\",\"isWrappedNative\":\"boolean indicating the underlying asset is the wrapped native token Requirements:  - Underlying token must implement `name`, `symbol` and `decimals`\",\"underlying\":\"address of the ERC20 token\"}},\"mint(uint256)\":{\"details\":\"The tToken contract needs to have been granted sufficient allowance to transfer the amount being used to mint.\",\"params\":{\"amount\":\"The amount of underlying tokens to use to mint.\"},\"returns\":{\"_0\":\"Amount of TTokens minted.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"redeem(uint256)\":{\"params\":{\"amount\":\"The amount of Teller tokens to redeem.\"}},\"redeemUnderlying(uint256)\":{\"params\":{\"amount\":\"The amount of underlying tokens to redeem.\"}},\"renounceRole(bytes32)\":{\"params\":{\"role\":\"Encoding of the role to remove.\"}},\"repayLoan(uint256,uint256)\":{\"params\":{\"amount\":\"Funds deposited back into the pool to repay the principal amount of a loan.\",\"interestAmount\":\"Interest value paid into the pool from a loan.\"}},\"revokeRole(bytes32,address)\":{\"params\":{\"account\":\"Address to remove the {role} from. Requirements:  - Sender must be role admin.\",\"role\":\"Encoding of the role to remove.\"}},\"setStrategy(address,bytes)\":{\"params\":{\"initData\":\"Optional data to initialize the strategy. Requirements:  - Sender must have ADMIN role\",\"strategy\":\"Address to the new strategy contract. Must implement the {ITTokenStrategy} interface.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalUnderlyingSupply()\":{\"returns\":{\"_0\":\"totalSupply_ the total supply denoted in the underlying asset.\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"underlying()\":{\"returns\":{\"_0\":\"ERC20 token that is the underlying asset\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LoanFunded(address,uint256)\":{\"notice\":\"This event is emitted when a loan has been taken out through the Teller Diamond.\"},\"LoanPaymentMade(address,uint256,uint256)\":{\"notice\":\"This event is emitted when a loan has been repaid through the Teller Diamond.\"},\"Mint(address,uint256,uint256)\":{\"notice\":\"This event is emitted when a user deposits tokens into the pool.\"},\"Redeem(address,uint256,uint256)\":{\"notice\":\"This event is emitted when a user withdraws tokens from the pool.\"},\"StrategySet(address,address)\":{\"notice\":\"This event is emitted when a new investment management strategy has been set for a Teller token.\"}},\"kind\":\"user\",\"methods\":{\"balanceOfUnderlying(address)\":{\"notice\":\"The balance of an {account} denoted in underlying value.\"},\"constructor\":{\"notice\":\"To prevent the initialization of this TToken implementation contract, we call the initializer modifier.  This prevents someone from:      1. Becoming the ADMIN of the implementation contract      2. Setting a strategy      3. Calling a malicious function on the strategy that destroys the logic contract\"},\"currentTVL()\":{\"notice\":\"Calculates the current Total Value Locked, denoted in the underlying asset, in the Teller Token pool.\"},\"debtRatioFor(uint256)\":{\"notice\":\"It validates whether supply to debt (StD) ratio is valid including the loan amount.\"},\"decimals()\":{\"notice\":\"it returns the decimal places of the respective TToken\"},\"exchangeRate()\":{\"notice\":\"It calculates the current scaled exchange rate for a whole Teller Token based of the underlying token balance.\"},\"fundLoan(address,uint256)\":{\"notice\":\"Called by the Teller Diamond contract when a loan has been taken out and requires funds.\"},\"getMarketState()\":{\"notice\":\"It calculates the market state values across a given market.Returns values that represent the global state across the market.\"},\"getStrategy()\":{\"notice\":\"Gets the strategy used for balancing funds.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants an account a new role.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Checks if an account has a specific role.\"},\"initialize(address,address,bool)\":{\"notice\":\"it initializes the Teller Token\"},\"mint(uint256)\":{\"notice\":\"Deposit underlying token amount into LP and mint tokens.\"},\"rebalance()\":{\"notice\":\"Rebalances the funds controlled by Teller Token according to the current strategy. See {TTokenStrategy}.\"},\"redeem(uint256)\":{\"notice\":\"Redeem supplied Teller tokens for underlying value.\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Redeem supplied underlying value.\"},\"renounceRole(bytes32)\":{\"notice\":\"Removes a role from the sender.\"},\"repayLoan(uint256,uint256)\":{\"notice\":\"Called by the Teller Diamond contract when a loan has been repaid.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Removes a role from an account.\"},\"setStrategy(address,bytes)\":{\"notice\":\"Sets or updates a strategy to use for balancing funds.\"},\"totalUnderlyingSupply()\":{\"notice\":\"It calculates the total supply of the underlying asset.\"},\"underlying()\":{\"notice\":\"The token that is the underlying asset for this Teller token.\"}},\"notice\":\"This contract represents a lending pool for an asset within Teller protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/ttoken/TToken_V3.sol\":\"TToken_V3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xaf583f9537cf446d08c33909e52313d349a831f6b88f20361b76474e40b4c36f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/reentry/ReentryMods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlStorageLib, AccessControlStorage } from \\\"../storage.sol\\\";\\n\\nabstract contract ReentryMods {\\n    modifier nonReentry(bytes32 id) {\\n        AccessControlStorage storage s = AccessControlStorageLib.store();\\n        require(!s.entered[id], \\\"AccessControl: reentered\\\");\\n        s.entered[id] = true;\\n        _;\\n        s.entered[id] = false;\\n    }\\n}\\n\",\"keccak256\":\"0x033c1164af25ef7d35a38a60973bf379b1cc603596914ffd85dcbcf0acdb6970\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RolesMods } from \\\"./RolesMods.sol\\\";\\nimport { RolesLib } from \\\"./RolesLib.sol\\\";\\nimport { ADMIN } from \\\"../../../shared/roles.sol\\\";\\n\\ncontract RolesFacet is RolesMods {\\n    /**\\n     * @notice Checks if an account has a specific role.\\n     * @param role Encoding of the role to check.\\n     * @param account Address to check the {role} for.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return RolesLib.hasRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Grants an account a new role.\\n     * @param role Encoding of the role to give.\\n     * @param account Address to give the {role} to.\\n     *\\n     * Requirements:\\n     *  - Sender must be role admin.\\n     */\\n    function grantRole(bytes32 role, address account)\\n        external\\n        authorized(ADMIN, msg.sender)\\n    {\\n        RolesLib.grantRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Removes a role from an account.\\n     * @param role Encoding of the role to remove.\\n     * @param account Address to remove the {role} from.\\n     *\\n     * Requirements:\\n     *  - Sender must be role admin.\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        external\\n        authorized(ADMIN, msg.sender)\\n    {\\n        RolesLib.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Removes a role from the sender.\\n     * @param role Encoding of the role to remove.\\n     */\\n    function renounceRole(bytes32 role) external {\\n        RolesLib.revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x3d02fb1286754a6da3419c81632d23e9444b1fe8cd64283e15fcb07a9b201815\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlStorageLib, AccessControlStorage } from \\\"../storage.sol\\\";\\n\\nlibrary RolesLib {\\n    function s() private pure returns (AccessControlStorage storage) {\\n        return AccessControlStorageLib.store();\\n    }\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Checks if an account has a specific role.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return s().roles[role][account];\\n    }\\n\\n    /**\\n     * @dev Gives an account a new role.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account already has the role, no event is emitted.\\n     * @param role Encoding of the role to give.\\n     * @param account Address to give the {role} to.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) return;\\n        s().roles[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Removes a role from an account.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account does not already have the role, no event is emitted.\\n     * @param role Encoding of the role to remove.\\n     * @param account Address to remove the {role} from.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) return;\\n        s().roles[role][account] = false;\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x36d0f5db441d2c3db7ee04d84c88ce9b14251cff4387702e96965c51acd1bc84\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesMods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RolesLib } from \\\"./RolesLib.sol\\\";\\n\\nabstract contract RolesMods {\\n    /**\\n     * @notice Requires that the {account} has {role}\\n     * @param role Encoding of the role to check.\\n     * @param account Address to check the {role} for.\\n     */\\n    modifier authorized(bytes32 role, address account) {\\n        require(\\n            RolesLib.hasRole(role, account),\\n            \\\"AccessControl: not authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x25eeaba823d4fc9c52d82a77cfdb409550ad985fc49b30a5560c1f313c1ca905\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct AccessControlStorage {\\n    mapping(bytes32 => mapping(address => bool)) roles;\\n    mapping(address => address) owners;\\n    mapping(bytes32 => bool) entered;\\n}\\n\\nbytes32 constant ACCESS_CONTROL_POS = keccak256(\\n    \\\"teller.access_control.storage\\\"\\n);\\n\\nlibrary AccessControlStorageLib {\\n    function store() internal pure returns (AccessControlStorage storage s) {\\n        bytes32 pos = ACCESS_CONTROL_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf667fb8d6beb59fc6f37d60ada6b811b5861512fedc661c483b9eca042e96112\",\"license\":\"MIT\"},\"contracts/lending/ttoken/ITToken_V3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {\\n    RolesFacet\\n} from \\\"../../contexts2/access-control/roles/RolesFacet.sol\\\";\\n\\n/**\\n * @notice This contract acts as an interface for the Teller token (TToken).\\n *\\n * @author develop@teller.finance\\n */\\nabstract contract ITToken_V3 is ERC20Upgradeable, RolesFacet {\\n    /**\\n     * @notice This event is emitted when a user deposits tokens into the pool.\\n     */\\n    event Mint(\\n        address indexed sender,\\n        uint256 tTokenAmount,\\n        uint256 underlyingAmount\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a user withdraws tokens from the pool.\\n     */\\n    event Redeem(\\n        address indexed sender,\\n        uint256 tTokenAmount,\\n        uint256 underlyingAmount\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a loan has been taken out through the Teller Diamond.\\n     * @param recipient The address receiving the borrowed funds.\\n     * @param totalBorrowed The total amount being loaned out by the tToken.\\n     */\\n    event LoanFunded(address indexed recipient, uint256 totalBorrowed);\\n\\n    /**\\n     * @notice This event is emitted when a loan has been repaid through the Teller Diamond.\\n     * @param sender The address making the payment to the tToken.\\n     * @param principlePayment The amount paid back towards the principle loaned out by the tToken.\\n     * @param interestPayment The amount paid back towards the interest owed to the tToken.\\n     */\\n    event LoanPaymentMade(\\n        address indexed sender,\\n        uint256 principlePayment,\\n        uint256 interestPayment\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a new investment management strategy has been set for a Teller token.\\n     * @param strategyAddress The address of the new strategy set for managing the underlying assets held by the tToken.\\n     * @param sender The address of the sender setting the token strategy.\\n     */\\n    event StrategySet(address strategyAddress, address indexed sender);\\n\\n    /**\\n     * @notice The token that is the underlying asset for this Teller token.\\n     * @return ERC20 token\\n     */\\n    function underlying() external view virtual returns (ERC20);\\n\\n    /**\\n     * @notice The balance of an {account} denoted in underlying value.\\n     * @param account Address to calculate the underlying balance.\\n     * @return balance_ the balance of the account\\n     */\\n    function balanceOfUnderlying(address account)\\n        external\\n        virtual\\n        returns (uint256 balance_);\\n\\n    /**\\n     * @notice It calculates the current exchange rate for a whole Teller Token based off the underlying token balance.\\n     * @return rate_ The current exchange rate.\\n     */\\n    function exchangeRate() external virtual returns (uint256 rate_);\\n\\n    /**\\n     * @notice It calculates the total supply of the underlying asset.\\n     * @return totalSupply_ the total supply denoted in the underlying asset.\\n     */\\n    function totalUnderlyingSupply()\\n        external\\n        virtual\\n        returns (uint256 totalSupply_);\\n\\n    /**\\n     * @notice It calculates the market state values across a given market.\\n     * @notice Returns values that represent the global state across the market.\\n     * @return totalSupplied Total amount of the underlying asset supplied.\\n     * @return totalBorrowed Total amount borrowed through loans.\\n     * @return totalRepaid The total amount repaid till the current timestamp.\\n     * @return totalInterestRepaid The total amount interest repaid till the current timestamp.\\n     * @return totalOnLoan Total amount currently deployed in loans.\\n     */\\n    function getMarketState()\\n        external\\n        virtual\\n        returns (\\n            uint256 totalSupplied,\\n            uint256 totalBorrowed,\\n            uint256 totalRepaid,\\n            uint256 totalInterestRepaid,\\n            uint256 totalOnLoan\\n        );\\n\\n    /**\\n     * @notice Calculates the current Total Value Locked, denoted in the underlying asset, in the Teller Token pool.\\n     * @return tvl_ The value locked in the pool.\\n     *\\n     * Note: This value includes the amount that is on loan (including ones that were sent to EOAs).\\n     */\\n    function currentTVL() external virtual returns (uint256 tvl_);\\n\\n    /**\\n     * @notice It validates whether supply to debt (StD) ratio is valid including the loan amount.\\n     * @param newLoanAmount the new loan amount to consider the StD ratio.\\n     * @return ratio_ The debt ratio for lending pool.\\n     */\\n    function debtRatioFor(uint256 newLoanAmount)\\n        external\\n        virtual\\n        returns (uint16 ratio_);\\n\\n    /**\\n     * @notice Called by the Teller Diamond contract when a loan has been taken out and requires funds.\\n     * @param recipient The account to send the funds to.\\n     * @param amount Funds requested to fulfill the loan.\\n     */\\n    function fundLoan(address recipient, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Called by the Teller Diamond contract when a loan has been repaid.\\n     * @param amount Funds deposited back into the pool to repay the principal amount of a loan.\\n     * @param interestAmount Interest value paid into the pool from a loan.\\n     */\\n    function repayLoan(uint256 amount, uint256 interestAmount) external virtual;\\n\\n    /**\\n     * @notice Increase account supply of specified token amount.\\n     * @param amount The amount of underlying tokens to use to mint.\\n     * @return mintAmount_ the amount minted of the specified token\\n     */\\n    function mint(uint256 amount)\\n        external\\n        payable\\n        virtual\\n        returns (uint256 mintAmount_);\\n\\n    /**\\n     * @notice Redeem supplied Teller tokens for underlying value.\\n     * @param amount The amount of Teller tokens to redeem.\\n     */\\n    function redeem(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem supplied underlying value.\\n     * @param amount The amount of underlying tokens to redeem.\\n     */\\n    function redeemUnderlying(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Rebalances the funds controlled by Teller Token according to the current strategy.\\n     *\\n     * See {TTokenStrategy}.\\n     */\\n    function rebalance() external virtual;\\n\\n    /**\\n     * @notice Sets a new strategy to use for balancing funds.\\n     * @param strategy Address to the new strategy contract. Must implement the {ITTokenStrategy} interface.\\n     * @param initData Optional data to initialize the strategy.\\n     *\\n     * Requirements:\\n     *  - Sender must have ADMIN role\\n     */\\n    function setStrategy(address strategy, bytes calldata initData)\\n        external\\n        virtual;\\n\\n    /**\\n     * @notice Gets the strategy used for balancing funds.\\n     * @return address of the strategy contract\\n     */\\n    function getStrategy() external view virtual returns (address);\\n\\n    /**\\n     * @notice it initializes the Teller Token\\n     * @param admin address of the admin to the respective Teller Token\\n     * @param underlying address of the ERC20 token\\n     * @param isWrappedNative boolean indicating the underlying asset is the wrapped native token\\n     */\\n    function initialize(\\n        address admin,\\n        address underlying,\\n        bool isWrappedNative\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0x05780bdfd0fcc9b540fe2680b58e247add7d68cc52537eb12e5298481bd107e7\",\"license\":\"MIT\"},\"contracts/lending/ttoken/TToken_V3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { CONTROLLER, ADMIN, EXCHANGE_RATE_FACTOR } from \\\"./data.sol\\\";\\nimport { ITTokenStrategy } from \\\"./strategies/ITTokenStrategy.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// Utils\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Interfaces\\nimport { ITToken_V3 } from \\\"./ITToken_V3.sol\\\";\\n\\n// Libraries\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { RolesLib } from \\\"../../contexts2/access-control/roles/RolesLib.sol\\\";\\nimport {\\n    ReentryMods\\n} from \\\"../../contexts2/access-control/reentry/ReentryMods.sol\\\";\\nimport { NumbersLib } from \\\"../../shared/libraries/NumbersLib.sol\\\";\\nimport { IWETH } from \\\"../../shared/interfaces/IWETH.sol\\\";\\n\\n// Storage\\nimport \\\"./token-storage.sol\\\" as Storage;\\n\\n/**\\n * @notice This contract represents a lending pool for an asset within Teller protocol.\\n * @author develop@teller.finance\\n */\\ncontract TToken_V3 is ITToken_V3, ReentryMods {\\n    /**\\n     * @notice To prevent the initialization of this TToken implementation contract, we call the initializer modifier.\\n     *  This prevents someone from:\\n     *      1. Becoming the ADMIN of the implementation contract\\n     *      2. Setting a strategy\\n     *      3. Calling a malicious function on the strategy that destroys the logic contract\\n     */\\n    constructor() initializer {}\\n\\n    function() pure returns (Storage.Store storage) internal constant s =\\n        Storage.store;\\n\\n    /* Public Functions */\\n\\n    /**\\n     * @notice it returns the decimal places of the respective TToken\\n     * @return decimals of the token\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return s().decimals;\\n    }\\n\\n    /**\\n     * @notice The token that is the underlying asset for this Teller token.\\n     * @return ERC20 token that is the underlying asset\\n     */\\n    function underlying() public view override returns (ERC20) {\\n        return s().underlying;\\n    }\\n\\n    /**\\n     * @notice The balance of an {account} denoted in underlying value.\\n     * @param account Address to calculate the underlying balance.\\n     * @return balance_ the balance of the account\\n     */\\n    function balanceOfUnderlying(address account)\\n        public\\n        override\\n        returns (uint256)\\n    {\\n        return _valueInUnderlying(balanceOf(account), exchangeRate());\\n    }\\n\\n    /**\\n     * @notice It calculates the current scaled exchange rate for a whole Teller Token based of the underlying token balance.\\n     * @return rate_ The current exchange rate, scaled by the EXCHANGE_RATE_FACTOR.\\n     */\\n    function exchangeRate() public override returns (uint256 rate_) {\\n        if (totalSupply() == 0) {\\n            return EXCHANGE_RATE_FACTOR;\\n        }\\n\\n        rate_ = (currentTVL() * EXCHANGE_RATE_FACTOR) / totalSupply();\\n    }\\n\\n    /**\\n     * @notice It calculates the total supply of the underlying asset.\\n     * @return totalSupply_ the total supply denoted in the underlying asset.\\n     */\\n    function totalUnderlyingSupply() public override returns (uint256) {\\n        bytes memory data = _delegateStrategy(\\n            abi.encodeWithSelector(\\n                ITTokenStrategy.totalUnderlyingSupply.selector\\n            )\\n        );\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /**\\n     * @notice It calculates the market state values across a given market.\\n     * @notice Returns values that represent the global state across the market.\\n     * @return totalSupplied Total amount of the underlying asset supplied.\\n     * @return totalBorrowed Total amount borrowed through loans.\\n     * @return totalRepaid The total amount repaid till the current timestamp.\\n     * @return totalInterestRepaid The total amount interest repaid till the current timestamp.\\n     * @return totalOnLoan Total amount currently deployed in loans.\\n     */\\n    function getMarketState()\\n        external\\n        override\\n        returns (\\n            uint256 totalSupplied,\\n            uint256 totalBorrowed,\\n            uint256 totalRepaid,\\n            uint256 totalInterestRepaid,\\n            uint256 totalOnLoan\\n        )\\n    {\\n        totalSupplied = totalUnderlyingSupply();\\n        totalBorrowed = s().totalBorrowed;\\n        totalRepaid = s().totalRepaid;\\n        totalInterestRepaid = s().totalInterestRepaid;\\n        totalOnLoan = totalBorrowed - totalRepaid;\\n    }\\n\\n    /**\\n     * @notice Calculates the current Total Value Locked, denoted in the underlying asset, in the Teller Token pool.\\n     * @return tvl_ The value locked in the pool.\\n     *\\n     * Note: This value includes the amount that is on loan (including ones that were sent to EOAs).\\n     */\\n    function currentTVL() public override returns (uint256 tvl_) {\\n        tvl_ += totalUnderlyingSupply();\\n        tvl_ += s().totalBorrowed;\\n        tvl_ -= s().totalRepaid;\\n    }\\n\\n    /**\\n     * @notice It validates whether supply to debt (StD) ratio is valid including the loan amount.\\n     * @param newLoanAmount the new loan amount to consider the StD ratio.\\n     * @return ratio_ The debt ratio for lending pool.\\n     */\\n    function debtRatioFor(uint256 newLoanAmount)\\n        external\\n        override\\n        returns (uint16 ratio_)\\n    {\\n        uint256 onLoan = s().totalBorrowed - s().totalRepaid;\\n        uint256 supplied = totalUnderlyingSupply() + onLoan;\\n        if (supplied > 0) {\\n            ratio_ = NumbersLib.ratioOf(onLoan + newLoanAmount, supplied);\\n        }\\n    }\\n\\n    /**\\n     * @notice Called by the Teller Diamond contract when a loan has been taken out and requires funds.\\n     * @param recipient The account to send the funds to.\\n     * @param amount Funds requested to fulfil the loan.\\n     */\\n    function fundLoan(address recipient, uint256 amount)\\n        external\\n        override\\n        authorized(CONTROLLER, _msgSender())\\n    {\\n        // Call the strategy to ensure there is enough available funds to fund the loan\\n        _delegateStrategy(\\n            abi.encodeWithSelector(ITTokenStrategy.withdraw.selector, amount)\\n        );\\n\\n        // Increase total borrowed amount\\n        s().totalBorrowed += amount;\\n\\n        // Transfer tokens to recipient\\n        SafeERC20.safeTransfer(s().underlying, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Called by the Teller Diamond contract when a loan has been repaid.\\n     * @param amount Funds deposited back into the pool to repay the principal amount of a loan.\\n     * @param interestAmount Interest value paid into the pool from a loan.\\n     */\\n    function repayLoan(uint256 amount, uint256 interestAmount)\\n        external\\n        override\\n        authorized(CONTROLLER, _msgSender())\\n    {\\n        s().totalRepaid += amount;\\n        s().totalInterestRepaid += interestAmount;\\n        emit LoanPaymentMade(_msgSender(), amount, interestAmount);\\n    }\\n\\n    /**\\n     * @dev The tToken contract needs to have been granted sufficient allowance to transfer the amount being used to mint.\\n     * @notice Deposit underlying token amount into LP and mint tokens.\\n     * @param amount The amount of underlying tokens to use to mint.\\n     * @return Amount of TTokens minted.\\n     */\\n    function mint(uint256 amount)\\n        external\\n        payable\\n        override\\n        nonReentry(keccak256(\\\"MINT\\\"))\\n        returns (uint256)\\n    {\\n        require(amount > 0, \\\"Teller: cannot mint 0\\\");\\n\\n        // Get the exchange rate by static calling this contract.\\n        // It fails when ETH value is sent when delegate calling the `totalUnderlyingSupply` function on the strategy.\\n        uint256 exchangeRate = TToken_V3(address(this)).exchangeRate();\\n        // Calculate amount of tokens to mint\\n        uint256 mintAmount = _valueOfUnderlying(amount, exchangeRate);\\n        require(mintAmount > 0, \\\"Teller: amount to be minted cannot be 0\\\");\\n\\n        if (msg.value > 0) {\\n            require(\\n                s().isWrappedNative,\\n                \\\"Teller: value given for non native token\\\"\\n            );\\n            require(msg.value == amount, \\\"Teller: incorrect value\\\");\\n\\n            // Wrap the native token\\n            IWETH(address(s().underlying)).deposit{ value: msg.value }();\\n        } else {\\n            // Transfer tokens from lender\\n            SafeERC20.safeTransferFrom(\\n                s().underlying,\\n                _msgSender(),\\n                address(this),\\n                amount\\n            );\\n        }\\n\\n        // Mint Teller token value of underlying\\n        _mint(_msgSender(), mintAmount);\\n\\n        emit Mint(_msgSender(), mintAmount, amount);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Redeem supplied Teller tokens for underlying value.\\n     * @param amount The amount of Teller tokens to redeem.\\n     */\\n    function redeem(uint256 amount)\\n        external\\n        override\\n        nonReentry(keccak256(\\\"REDEEM\\\"))\\n    {\\n        require(amount > 0, \\\"Teller: cannot withdraw 0\\\");\\n        require(\\n            amount <= balanceOf(_msgSender()),\\n            \\\"Teller: redeem amount exceeds balance\\\"\\n        );\\n\\n        // Accrue interest and calculate exchange rate\\n        uint256 underlyingAmount = _valueInUnderlying(amount, exchangeRate());\\n        require(\\n            underlyingAmount > 0,\\n            \\\"Teller: underlying teller token value to be redeemed cannot be 0\\\"\\n        );\\n\\n        require(\\n            underlyingAmount <= totalUnderlyingSupply(),\\n            \\\"Teller: redeem ttoken lp not enough supply\\\"\\n        );\\n\\n        // Burn Teller Tokens and transfer underlying\\n        _redeem(amount, underlyingAmount);\\n    }\\n\\n    /**\\n     * @notice Redeem supplied underlying value.\\n     * @param amount The amount of underlying tokens to redeem.\\n     */\\n    function redeemUnderlying(uint256 amount)\\n        external\\n        override\\n        nonReentry(keccak256(\\\"REDEEM\\\"))\\n    {\\n        require(amount > 0, \\\"Teller: cannot withdraw 0\\\");\\n        require(\\n            amount <= totalUnderlyingSupply(),\\n            \\\"Teller: redeem ttoken lp not enough supply\\\"\\n        );\\n\\n        // Accrue interest and calculate exchange rate\\n        uint256 rate = exchangeRate();\\n        uint256 tokenValue = _valueOfUnderlying(amount, rate) + 1;\\n\\n        // Make sure sender has adequate balance\\n        require(\\n            tokenValue <= balanceOf(_msgSender()),\\n            \\\"Teller: redeem amount exceeds balance\\\"\\n        );\\n\\n        // Burn Teller Tokens and transfer underlying\\n        _redeem(tokenValue, amount);\\n    }\\n\\n    /**\\n     * @dev Redeem an {amount} of Teller Tokens and transfers {underlyingAmount} to the caller.\\n     * @param amount Total amount of Teller Tokens to burn.\\n     * @param underlyingAmount Total amount of underlying asset tokens to transfer to caller.\\n     *\\n     * This function should only be called by {redeem} and {redeemUnderlying} after the exchange\\n     * rate and both token values have been calculated to use.\\n     */\\n    function _redeem(uint256 amount, uint256 underlyingAmount) internal {\\n        // Burn Teller tokens\\n        _burn(_msgSender(), amount);\\n\\n        // Make sure enough funds are available to redeem\\n        _delegateStrategy(\\n            abi.encodeWithSelector(\\n                ITTokenStrategy.withdraw.selector,\\n                underlyingAmount\\n            )\\n        );\\n\\n        // Transfer funds back to lender\\n        SafeERC20.safeTransfer(s().underlying, _msgSender(), underlyingAmount);\\n\\n        emit Redeem(_msgSender(), amount, underlyingAmount);\\n    }\\n\\n    /**\\n     * @notice Rebalances the funds controlled by Teller Token according to the current strategy.\\n     *\\n     * See {TTokenStrategy}.\\n     */\\n    function rebalance() public override {\\n        _delegateStrategy(\\n            abi.encodeWithSelector(ITTokenStrategy.rebalance.selector)\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets or updates a strategy to use for balancing funds.\\n     * @param strategy Address to the new strategy contract. Must implement the {ITTokenStrategy} interface.\\n     * @param initData Optional data to initialize the strategy.\\n     *\\n     * Requirements:\\n     *  - Sender must have ADMIN role\\n     */\\n    function setStrategy(address strategy, bytes calldata initData)\\n        external\\n        override\\n        authorized(ADMIN, _msgSender())\\n    {\\n        require(\\n            ERC165Checker.supportsInterface(\\n                strategy,\\n                type(ITTokenStrategy).interfaceId\\n            ),\\n            \\\"Teller: strategy does not support ITTokenStrategy\\\"\\n        );\\n        s().strategy = strategy;\\n        if (initData.length > 0) {\\n            _delegateStrategy(initData);\\n        }\\n        emit StrategySet(strategy, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Gets the strategy used for balancing funds.\\n     * @return address of the strategy contract\\n     */\\n    function getStrategy() external view override returns (address) {\\n        return s().strategy;\\n    }\\n\\n    /**\\n     * @notice it initializes the Teller Token\\n     * @param admin address of the admin to the respective Teller Token\\n     * @param underlying address of the ERC20 token\\n     * @param isWrappedNative boolean indicating the underlying asset is the wrapped native token\\n     *\\n     * Requirements:\\n     *  - Underlying token must implement `name`, `symbol` and `decimals`\\n     */\\n    function initialize(\\n        address admin,\\n        address underlying,\\n        bool isWrappedNative\\n    ) external override initializer {\\n        require(\\n            Address.isContract(msg.sender),\\n            \\\"Teller: controller not contract\\\"\\n        );\\n        require(\\n            Address.isContract(underlying),\\n            \\\"Teller: underlying token not contract\\\"\\n        );\\n\\n        RolesLib.grantRole(CONTROLLER, msg.sender);\\n        RolesLib.grantRole(ADMIN, admin);\\n\\n        s().underlying = ERC20(underlying);\\n        __ERC20_init(\\n            string(abi.encodePacked(\\\"Teller \\\", s().underlying.name())),\\n            string(abi.encodePacked(\\\"t\\\", s().underlying.symbol()))\\n        );\\n        s().decimals = s().underlying.decimals();\\n        s().isWrappedNative = isWrappedNative;\\n    }\\n\\n    /**\\n     * @notice it retrieves the value of the underlying token\\n     * @param amount the amount of tokens to calculate the value of\\n     * @param rate the exchangeRate() to divide with the amount * exchange_rate_factor\\n     * @return value_ the underlying value of the token amount\\n     */\\n    function _valueOfUnderlying(uint256 amount, uint256 rate)\\n        internal\\n        pure\\n        returns (uint256 value_)\\n    {\\n        value_ = (amount * EXCHANGE_RATE_FACTOR) / rate;\\n    }\\n\\n    /**\\n     * @notice it retrieves the value in the underlying tokens\\n     *\\n     */\\n    function _valueInUnderlying(uint256 amount, uint256 rate)\\n        internal\\n        pure\\n        returns (uint256 value_)\\n    {\\n        value_ = (amount * (rate)) / EXCHANGE_RATE_FACTOR;\\n    }\\n\\n    /**\\n     * @notice Delegates data to call on the strategy contract.\\n     * @param callData Data to call the strategy contract with.\\n     *\\n     */\\n    function _delegateStrategy(bytes memory callData)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return Address.functionDelegateCall(s().strategy, callData);\\n    }\\n}\\n\",\"keccak256\":\"0x1ab3423e9b4f582ec80d25499a6ef55f6fb91614e7b58b74f7e1c58f6ee0036d\",\"license\":\"MIT\"},\"contracts/lending/ttoken/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Role ID used to pull funds for the asset it manages (i.e. TellerDiamond)\\nbytes32 constant CONTROLLER = keccak256(\\\"CONTROLLER\\\");\\n// Role ID used to for accounts to call special methods that modify its state\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\nuint256 constant EXCHANGE_RATE_FACTOR = 1e18;\\n\",\"keccak256\":\"0xe92de48c533bc8d6d4dcc3aa56c41f9874b040f09aefada947d56fe1f24251f6\",\"license\":\"MIT\"},\"contracts/lending/ttoken/strategies/ITTokenStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITTokenStrategy {\\n    /**\\n     * @notice This event is emitted when the underlying assets are rebalanced as directed by the set investment strategy.\\n     * @param strategyName The name of the strategy being rebalanced - example: \\\"CompoundStrategy_1\\\"\\n     * @param sender The address of the sender rebalancing the token strategy.\\n     */\\n    event StrategyRebalanced(\\n        string indexed strategyName,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice This event is emitted when the underlying assets are rebalanced as directed by the set investment strategy.\\n     * @param strategyName The name of the strategy being rebalanced - example: \\\"CompoundStrategy_1\\\"\\n     * @param investmentAsset The address of the investible asset / protocol being used to leverage the underlying assets.\\n     * @param sender The address of the sender rebalancing the token strategy.\\n     */\\n    event StrategyInitialized(\\n        string indexed strategyName,\\n        address investmentAsset,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice it returns the total supply of an underlying asset in a Teller token.\\n     * @return uint256 the underlying supply\\n     */\\n    function totalUnderlyingSupply() external returns (uint256);\\n\\n    /**\\n     * @notice it rebalances the underlying asset held by the Teller Token.\\n     */\\n    function rebalance() external;\\n\\n    /**\\n     * @notice it withdraws amount of tokens in a pool\\n     * @param amount amount to withdraw\\n     */\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x69863b14187ede1cc9bef264db7edcc477be597f9b2d4782bdac6187573c2b95\",\"license\":\"MIT\"},\"contracts/lending/ttoken/token-storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nstruct Store {\\n    // The underlying asset of the tToken\\n    ERC20 underlying;\\n    // The address of the investment strategy contract managing the underlying assets\\n    address strategy;\\n    // The total amount of the underlying asset currently out in disbursed loans\\n    uint256 totalBorrowed;\\n    // The total amount of the underlying asset currently repaid from disbursed loans\\n    uint256 totalRepaid;\\n    // The total amount of the underlying asset currently repaid in the form of interest owed from disbursed loans\\n    uint256 totalInterestRepaid;\\n    // The decimals of the underlying ERC20 asset\\n    uint8 decimals;\\n    // The status of token investment restriction\\n    bool restricted; // DEPRECATED\\n    // The wrapped native token address\\n    bool isWrappedNative;\\n}\\n\\nbytes32 constant POSITION = keccak256(\\\"ttoken.storage.position\\\");\\n\\n/**\\n * @notice it saves the Store struct in a hashed slot\\n */\\nfunction store() pure returns (Store storage s_) {\\n    bytes32 position = POSITION;\\n    assembly {\\n        s_.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0xd24e794a2b3e3a3fb0a39135b51be47c3cb53247b82369faa72c4223e12d5554\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice It is the interface of functions that we use for the canonical WETH contract.\\n *\\n * @author develop@teller.finance\\n */\\ninterface IWETH {\\n    /**\\n     * @notice It withdraws ETH from the contract by sending it to the caller and reducing the caller's internal balance of WETH.\\n     * @param amount The amount of ETH to withdraw.\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice It deposits ETH into the contract and increases the caller's internal balance of WETH.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice It gets the ETH deposit balance of an {account}.\\n     * @param account Address to get balance of.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice It transfers the WETH amount specified to the given {account}.\\n     * @param to Address to transfer to\\n     * @param value Amount of WETH to transfer\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x346a3ac1d441ea92f67e8c2d5f208910fd79dae96b4d8b94be8b0a235e23c751\",\"license\":\"MIT\"},\"contracts/shared/libraries/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    /**\\n     * @dev It represents 100% with 2 decimal places.\\n     */\\n    uint256 internal constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint16 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self * uint256(percentage)) / ONE_HUNDRED_PERCENT;\\n    }\\n\\n    function percent(int256 self, uint256 percentage)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (self * int256(percentage)) / int256(ONE_HUNDRED_PERCENT);\\n    }\\n\\n    /**\\n     * @notice it returns the absolute number of a specified parameter\\n     * @param self the number to be returned in it's absolute\\n     * @return the absolute number\\n     */\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @return Ratio percentage with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 num1, uint256 num2)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        return\\n            num2 == 0\\n                ? 0\\n                : SafeCast.toUint16((num1 * ONE_HUNDRED_PERCENT) / num2);\\n    }\\n}\\n\",\"keccak256\":\"0x863cbfc9fe609554ca1bd86af2193454580ce7e7a68ea0cc0f7638111c0e7a76\",\"license\":\"MIT\"},\"contracts/shared/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev the roles for the user to assign, revoke and check in functions\\n */\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant PAUSER = keccak256(\\\"PAUSER\\\");\\n\",\"keccak256\":\"0x5693195a36d6f09aba15caf0f5312afa5e23286e20fb50f2fb87b38fab673093\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002c575060005460ff16155b620000945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000b7576000805461ffff19166101011790555b8015620000ca576000805461ff00191690555b50612e7580620000db6000396000f3fe6080604052600436106101d85760003560e01c80638a700b5311610102578063be71e66c11610095578063dd62ed3e11610064578063dd62ed3e14610555578063e4bbb5a81461059b578063e920b1e1146105bb578063ecfd3519146105db57600080fd5b8063be71e66c146104b8578063d547741f146104d8578063d8165743146104f8578063db006a751461053557600080fd5b8063a0712d68116100d1578063a0712d6814610450578063a457c2d714610463578063a9059cbb14610483578063a95411e0146104a357600080fd5b80638a700b53146103db5780638bb9c5bf146103fb57806391d148541461041b57806395d89b411461043b57600080fd5b8063313ce5671161017a5780636f307dc3116101495780636f307dc31461035b57806370a08231146103705780637d7c2a1c146103a6578063852a12e3146103bb57600080fd5b8063313ce567146102df57806339509351146103065780633af9e669146103265780633ba0b9a91461034657600080fd5b8063143a08d4116101b6578063143a08d41461026557806318160ddd1461028857806323b872dd1461029d5780632f2ff15d146102bd57600080fd5b806306fdde03146101dd57806307da060314610208578063095ea7b314610235575b600080fd5b3480156101e957600080fd5b506101f261060e565b6040516101ff9190612b4b565b60405180910390f35b34801561021457600080fd5b5061021d6106a0565b6040516001600160a01b0390911681526020016101ff565b34801561024157600080fd5b50610255610250366004612960565b6106bc565b60405190151581526020016101ff565b34801561027157600080fd5b5061027a6106d3565b6040519081526020016101ff565b34801561029457600080fd5b5060355461027a565b3480156102a957600080fd5b506102556102b83660046128a7565b610726565b3480156102c957600080fd5b506102dd6102d83660046129bd565b6107d7565b005b3480156102eb57600080fd5b506102f461081d565b60405160ff90911681526020016101ff565b34801561031257600080fd5b50610255610321366004612960565b610833565b34801561033257600080fd5b5061027a610341366004612815565b61086f565b34801561035257600080fd5b5061027a610899565b34801561036757600080fd5b5061021d6108e2565b34801561037c57600080fd5b5061027a61038b366004612815565b6001600160a01b031660009081526033602052604090205490565b3480156103b257600080fd5b506102dd6108fb565b3480156103c757600080fd5b506102dd6103d63660046129a5565b610930565b3480156103e757600080fd5b506102dd6103f6366004612a95565b610aca565b34801561040757600080fd5b506102dd6104163660046129a5565b610b94565b34801561042757600080fd5b506102556104363660046129bd565b610b9e565b34801561044757600080fd5b506101f2610baa565b61027a61045e3660046129a5565b610bb9565b34801561046f57600080fd5b5061025561047e366004612960565b610f50565b34801561048f57600080fd5b5061025561049e366004612960565b610fe9565b3480156104af57600080fd5b5061027a610ff6565b3480156104c457600080fd5b506102dd6104d33660046128e2565b61103a565b3480156104e457600080fd5b506102dd6104f33660046129bd565b61119e565b34801561050457600080fd5b5061050d6111de565b604080519586526020860194909452928401919091526060830152608082015260a0016101ff565b34801561054157600080fd5b506102dd6105503660046129a5565b61122d565b34801561056157600080fd5b5061027a61057036600461282f565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3480156105a757600080fd5b506102dd6105b6366004612861565b611429565b3480156105c757600080fd5b506102dd6105d6366004612960565b6117c2565b3480156105e757600080fd5b506105fb6105f63660046129a5565b61189a565b60405161ffff90911681526020016101ff565b60606036805461061d90612d63565b80601f016020809104026020016040519081016040528092919081815260200182805461064990612d63565b80156106965780601f1061066b57610100808354040283529160200191610696565b820191906000526020600020905b81548152906001019060200180831161067957829003601f168201915b5050505050905090565b60006106aa6118fb565b600101546001600160a01b0316919050565b60006106c933848461191f565b5060015b92915050565b6040805160048152602481019091526020810180516001600160e01b031663050e823560e21b179052600090819061070a90611a43565b9050808060200190518101906107209190612a7d565b91505090565b6000610733848484611a63565b6001600160a01b0384166000908152603460209081526040808320338452909152902054828110156107bd5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6107ca853385840361191f565b60019150505b9392505050565b600080516020612e00833981519152336107f18282611c31565b61080d5760405162461bcd60e51b81526004016107b490612b7e565b6108178484611c69565b50505050565b60006108276118fb565b6005015460ff16919050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490916106c991859061086a908690612cc9565b61191f565b6001600160a01b0381166000908152603360205260408120546106cd90610894610899565b611ce4565b60006108a460355490565b6108b55750670de0b6b3a764000090565b603554670de0b6b3a76400006108c9610ff6565b6108d39190612d01565b6108dd9190612ce1565b905090565b60006108ec6118fb565b546001600160a01b0316919050565b6040805160048152602481019091526020810180516001600160e01b0316631f5f0a8760e21b17905261092d90611a43565b50565b7feba135a74248c737f901cbd8d0f53e729a3f212e734748c2e0d8d39096125e5c60008190527f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb853605366020527fd51fad483e9bd4fa5dd43c95a6dde60b73fec1248ce54775bb96529d1141aa1b54600080516020612e208339815191529060ff16156109cc5760405162461bcd60e51b81526004016107b490612c92565b60008281526002820160205260409020805460ff1916600117905582610a305760405162461bcd60e51b8152602060048201526019602482015278054656c6c65723a2063616e6e6f74207769746864726177203603c1b60448201526064016107b4565b610a386106d3565b831115610a575760405162461bcd60e51b81526004016107b490612c48565b6000610a61610899565b90506000610a6f8583611d03565b610a7a906001612cc9565b9050610a853361038b565b811115610aa45760405162461bcd60e51b81526004016107b490612bb5565b610aae8186611d18565b5050600091825260020160205260409020805460ff1916905550565b7f70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d22152933610af68282611c31565b610b125760405162461bcd60e51b81526004016107b490612b7e565b83610b1b6118fb565b6003016000828254610b2d9190612cc9565b90915550839050610b3c6118fb565b6004016000828254610b4e9190612cc9565b9091555050604080518581526020810185905233917fc091ac0b81e7f83b1bd632697aab4fe32a683168ca5ca7ad8075b49c3e669c4a910160405180910390a250505050565b61092d8133611d9d565b60006107d08383611c31565b60606037805461061d90612d63565b7ffdf81848136595c31bb5f76217767372bc4bf906663038eb38381131ea27ecba60008181527f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb853605366020527fa8b4b8db2d6e615394be6b6e7c62c4b724469d7ac9026422a171f9c66a50d83f54909190600080516020612e208339815191529060ff1615610c585760405162461bcd60e51b81526004016107b490612c92565b60008281526002820160205260409020805460ff1916600117905583610cb85760405162461bcd60e51b8152602060048201526015602482015274054656c6c65723a2063616e6e6f74206d696e74203605c1b60448201526064016107b4565b6000306001600160a01b0316633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610cf557600080fd5b505af1158015610d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2d9190612a7d565b90506000610d3b8683611d03565b905060008111610d9d5760405162461bcd60e51b815260206004820152602760248201527f54656c6c65723a20616d6f756e7420746f206265206d696e7465642063616e6e60448201526606f7420626520360cc1b60648201526084016107b4565b3415610ecf57610dab6118fb565b6005015462010000900460ff16610e155760405162461bcd60e51b815260206004820152602860248201527f54656c6c65723a2076616c756520676976656e20666f72206e6f6e206e6174696044820152673b32903a37b5b2b760c11b60648201526084016107b4565b853414610e645760405162461bcd60e51b815260206004820152601760248201527f54656c6c65723a20696e636f72726563742076616c756500000000000000000060448201526064016107b4565b610e6c6118fb565b5460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0913491600480830192600092919082900301818588803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b5050505050610eec565b610eec610eda6118fb565b546001600160a01b0316333089611e14565b610ef63382611e7f565b604080518281526020810188905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a2935050600091825260020160205260409020805460ff19169055919050565b3360009081526034602090815260408083206001600160a01b038616845290915281205482811015610fd25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107b4565b610fdf338585840361191f565b5060019392505050565b60006106c9338484611a63565b60006110006106d3565b61100a9082612cc9565b90506110146118fb565b600201546110229082612cc9565b905061102c6118fb565b600301546108dd9082612d20565b600080516020612e00833981519152336110548282611c31565b6110705760405162461bcd60e51b81526004016107b490612b7e565b6110818563475c5f8560e01b611f5e565b6110e75760405162461bcd60e51b815260206004820152603160248201527f54656c6c65723a20737472617465677920646f6573206e6f7420737570706f7260448201527074204954546f6b656e537472617465677960781b60648201526084016107b4565b846110f06118fb565b60010180546001600160a01b0319166001600160a01b039290921691909117905582156111585761115684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a4392505050565b505b604080516001600160a01b0387168152905133917f7a587acd0fd101cfe7d6d98bad768e91209a7ae91e55c3702570425bf0eae9bc919081900360200190a25050505050565b600080516020612e00833981519152336111b88282611c31565b6111d45760405162461bcd60e51b81526004016107b490612b7e565b6108178484611d9d565b60008060008060006111ee6106d3565b94506111f86118fb565b6002015493506112066118fb565b6003015492506112146118fb565b6004015491506112248385612d20565b90509091929394565b7feba135a74248c737f901cbd8d0f53e729a3f212e734748c2e0d8d39096125e5c60008190527f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb853605366020527fd51fad483e9bd4fa5dd43c95a6dde60b73fec1248ce54775bb96529d1141aa1b54600080516020612e208339815191529060ff16156112c95760405162461bcd60e51b81526004016107b490612c92565b60008281526002820160205260409020805460ff191660011790558261132d5760405162461bcd60e51b8152602060048201526019602482015278054656c6c65723a2063616e6e6f74207769746864726177203603c1b60448201526064016107b4565b6113363361038b565b8311156113555760405162461bcd60e51b81526004016107b490612bb5565b600061136384610894610899565b9050600081116113dd576040805162461bcd60e51b81526020600482015260248101919091527f54656c6c65723a20756e6465726c79696e672074656c6c657220746f6b656e2060448201527f76616c756520746f2062652072656465656d65642063616e6e6f74206265203060648201526084016107b4565b6113e56106d3565b8111156114045760405162461bcd60e51b81526004016107b490612c48565b61140e8482611d18565b50600091825260020160205260409020805460ff1916905550565b600054610100900460ff1680611442575060005460ff16155b61145e5760405162461bcd60e51b81526004016107b490612bfa565b600054610100900460ff16158015611480576000805461ffff19166101011790555b333b6114ce5760405162461bcd60e51b815260206004820152601f60248201527f54656c6c65723a20636f6e74726f6c6c6572206e6f7420636f6e74726163740060448201526064016107b4565b823b61152a5760405162461bcd60e51b815260206004820152602560248201527f54656c6c65723a20756e6465726c79696e6720746f6b656e206e6f7420636f6e6044820152641d1c9858dd60da1b60648201526084016107b4565b6115547f70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d22152933611c69565b61156c600080516020612e0083398151915285611c69565b826115756118fb565b80546001600160a01b0319166001600160a01b03929092169190911790556116e761159e6118fb565b54604080516306fdde0360e01b815290516001600160a01b03909216916306fdde0391600480820192600092909190829003018186803b1580156115e157600080fd5b505afa1580156115f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261161d91908101906129df565b60405160200161162d9190612af3565b6040516020818303038152906040526116446118fb565b54604080516395d89b4160e01b815290516001600160a01b03909216916395d89b4191600480820192600092909190829003018186803b15801561168757600080fd5b505afa15801561169b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c391908101906129df565b6040516020016116d39190612b22565b604051602081830303815290604052611f7a565b6116ef6118fb565b546040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612ab6565b6117726118fb565b600501805460ff191660ff92909216919091179055816117906118fb565b6005018054911515620100000262ff0000199092169190911790558015610817576000805461ff001916905550505050565b7f70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d221529336117ee8282611c31565b61180a5760405162461bcd60e51b81526004016107b490612b7e565b6040516024810184905261185c90632e1a7d4d60e01b906044015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a43565b50826118666118fb565b60020160008282546118789190612cc9565b9091555061081790506118896118fb565b546001600160a01b03168585611ffa565b6000806118a56118fb565b600301546118b16118fb565b600201546118bf9190612d20565b90506000816118cc6106d3565b6118d69190612cc9565b905080156118f4576118f16118eb8584612cc9565b8261202a565b92505b5050919050565b7ff72b349e2c69862bdc86afd2a363bf16c24bd97d10f7ac9d49f7e2eedebba2b490565b6001600160a01b0383166119815760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107b4565b6001600160a01b0382166119e25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107b4565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60606106cd611a506118fb565b600101546001600160a01b03168361205f565b6001600160a01b038316611ac75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016107b4565b6001600160a01b038216611b295760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016107b4565b6001600160a01b03831660009081526033602052604090205481811015611ba15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016107b4565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611bd8908490612cc9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c2491815260200190565b60405180910390a3610817565b6000918252600080516020612e20833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611c738282611c31565b15611c7c575050565b6000828152600080516020612e20833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000670de0b6b3a7640000611cf98385612d01565b6107d09190612ce1565b600081611cf9670de0b6b3a764000085612d01565b611d223383612084565b60405160248101829052611d4190632e1a7d4d60e01b90604401611825565b50611d5e611d4d6118fb565b546001600160a01b03163383611ffa565b604080518381526020810183905233917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929910160405180910390a25050565b611da78282611c31565b611daf575050565b6000828152600080516020612e20833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b03808516602483015283166044820152606481018290526108179085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121d2565b6001600160a01b038216611ed55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107b4565b8060356000828254611ee79190612cc9565b90915550506001600160a01b03821660009081526033602052604081208054839290611f14908490612cc9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000611f69836122a4565b80156107d057506107d083836122d7565b600054610100900460ff1680611f93575060005460ff16155b611faf5760405162461bcd60e51b81526004016107b490612bfa565b600054610100900460ff16158015611fd1576000805461ffff19166101011790555b611fd96123c0565b611fe3838361242b565b8015611ff5576000805461ff00191690555b505050565b6040516001600160a01b038316602482015260448101829052611ff590849063a9059cbb60e01b90606401611e48565b60008115612056576120518261204261271086612d01565b61204c9190612ce1565b6124c0565b6107d0565b50600092915050565b60606107d08383604051806060016040528060278152602001612dd960279139612527565b6001600160a01b0382166120e45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016107b4565b6001600160a01b038216600090815260336020526040902054818110156121585760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016107b4565b6001600160a01b0383166000908152603360205260408120838303905560358054849290612187908490612d20565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000612227826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125f19092919063ffffffff16565b805190915015611ff557808060200190518101906122459190612989565b611ff55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107b4565b60006122b7826301ffc9a760e01b6122d7565b80156106cd57506122d0826001600160e01b03196122d7565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061233e908690612ad7565b6000604051808303818686fa925050503d806000811461237a576040519150601f19603f3d011682016040523d82523d6000602084013e61237f565b606091505b509150915060208151101561239a57600093505050506106cd565b8180156123b65750808060200190518101906123b69190612989565b9695505050505050565b600054610100900460ff16806123d9575060005460ff16155b6123f55760405162461bcd60e51b81526004016107b490612bfa565b600054610100900460ff16158015612417576000805461ffff19166101011790555b801561092d576000805461ff001916905550565b600054610100900460ff1680612444575060005460ff16155b6124605760405162461bcd60e51b81526004016107b490612bfa565b600054610100900460ff16158015612482576000805461ffff19166101011790555b8251612495906036906020860190612769565b5081516124a9906037906020850190612769565b508015611ff5576000805461ff0019169055505050565b600061ffff8211156125235760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b60648201526084016107b4565b5090565b6060833b6125865760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107b4565b600080856001600160a01b0316856040516125a19190612ad7565b600060405180830381855af49150503d80600081146125dc576040519150601f19603f3d011682016040523d82523d6000602084013e6125e1565b606091505b50915091506123b6828286612608565b60606126008484600085612641565b949350505050565b606083156126175750816107d0565b8251156126275782518084602001fd5b8160405162461bcd60e51b81526004016107b49190612b4b565b6060824710156126a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107b4565b843b6126f05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107b4565b600080866001600160a01b0316858760405161270c9190612ad7565b60006040518083038185875af1925050503d8060008114612749576040519150601f19603f3d011682016040523d82523d6000602084013e61274e565b606091505b509150915061275e828286612608565b979650505050505050565b82805461277590612d63565b90600052602060002090601f01602090048101928261279757600085556127dd565b82601f106127b057805160ff19168380011785556127dd565b828001600101855582156127dd579182015b828111156127dd5782518255916020019190600101906127c2565b506125239291505b8082111561252357600081556001016127e5565b80356001600160a01b038116811461281057600080fd5b919050565b600060208284031215612826578081fd5b6107d0826127f9565b60008060408385031215612841578081fd5b61284a836127f9565b9150612858602084016127f9565b90509250929050565b600080600060608486031215612875578081fd5b61287e846127f9565b925061288c602085016127f9565b9150604084013561289c81612dca565b809150509250925092565b6000806000606084860312156128bb578283fd5b6128c4846127f9565b92506128d2602085016127f9565b9150604084013590509250925092565b6000806000604084860312156128f6578283fd5b6128ff846127f9565b9250602084013567ffffffffffffffff8082111561291b578384fd5b818601915086601f83011261292e578384fd5b81358181111561293c578485fd5b87602082850101111561294d578485fd5b6020830194508093505050509250925092565b60008060408385031215612972578182fd5b61297b836127f9565b946020939093013593505050565b60006020828403121561299a578081fd5b81516107d081612dca565b6000602082840312156129b6578081fd5b5035919050565b600080604083850312156129cf578182fd5b82359150612858602084016127f9565b6000602082840312156129f0578081fd5b815167ffffffffffffffff80821115612a07578283fd5b818401915084601f830112612a1a578283fd5b815181811115612a2c57612a2c612db4565b604051601f8201601f19908116603f01168101908382118183101715612a5457612a54612db4565b81604052828152876020848701011115612a6c578586fd5b61275e836020830160208801612d37565b600060208284031215612a8e578081fd5b5051919050565b60008060408385031215612aa7578182fd5b50508035926020909101359150565b600060208284031215612ac7578081fd5b815160ff811681146107d0578182fd5b60008251612ae9818460208701612d37565b9190910192915050565b6602a32b63632b9160cd1b815260008251612b15816007850160208701612d37565b9190910160070192915050565b601d60fa1b815260008251612b3e816001850160208701612d37565b9190910160010192915050565b6020815260008251806020840152612b6a816040850160208701612d37565b601f01601f19169190910160400192915050565b6020808252601d908201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a6564000000604082015260600190565b60208082526025908201527f54656c6c65723a2072656465656d20616d6f756e7420657863656564732062616040820152646c616e636560d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f54656c6c65723a2072656465656d2074746f6b656e206c70206e6f7420656e6f60408201526975676820737570706c7960b01b606082015260800190565b60208082526018908201527f416363657373436f6e74726f6c3a207265656e74657265640000000000000000604082015260600190565b60008219821115612cdc57612cdc612d9e565b500190565b600082612cfc57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d1b57612d1b612d9e565b500290565b600082821015612d3257612d32612d9e565b500390565b60005b83811015612d52578181015183820152602001612d3a565b838111156108175750506000910152565b600181811c90821680612d7757607f821691505b60208210811415612d9857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461092d57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564df8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec427b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb85360534a26469706673582212200e61627130387291382ad32200992083890e478bec09d949e53198c2d2b9bd7e64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80638a700b5311610102578063be71e66c11610095578063dd62ed3e11610064578063dd62ed3e14610555578063e4bbb5a81461059b578063e920b1e1146105bb578063ecfd3519146105db57600080fd5b8063be71e66c146104b8578063d547741f146104d8578063d8165743146104f8578063db006a751461053557600080fd5b8063a0712d68116100d1578063a0712d6814610450578063a457c2d714610463578063a9059cbb14610483578063a95411e0146104a357600080fd5b80638a700b53146103db5780638bb9c5bf146103fb57806391d148541461041b57806395d89b411461043b57600080fd5b8063313ce5671161017a5780636f307dc3116101495780636f307dc31461035b57806370a08231146103705780637d7c2a1c146103a6578063852a12e3146103bb57600080fd5b8063313ce567146102df57806339509351146103065780633af9e669146103265780633ba0b9a91461034657600080fd5b8063143a08d4116101b6578063143a08d41461026557806318160ddd1461028857806323b872dd1461029d5780632f2ff15d146102bd57600080fd5b806306fdde03146101dd57806307da060314610208578063095ea7b314610235575b600080fd5b3480156101e957600080fd5b506101f261060e565b6040516101ff9190612b4b565b60405180910390f35b34801561021457600080fd5b5061021d6106a0565b6040516001600160a01b0390911681526020016101ff565b34801561024157600080fd5b50610255610250366004612960565b6106bc565b60405190151581526020016101ff565b34801561027157600080fd5b5061027a6106d3565b6040519081526020016101ff565b34801561029457600080fd5b5060355461027a565b3480156102a957600080fd5b506102556102b83660046128a7565b610726565b3480156102c957600080fd5b506102dd6102d83660046129bd565b6107d7565b005b3480156102eb57600080fd5b506102f461081d565b60405160ff90911681526020016101ff565b34801561031257600080fd5b50610255610321366004612960565b610833565b34801561033257600080fd5b5061027a610341366004612815565b61086f565b34801561035257600080fd5b5061027a610899565b34801561036757600080fd5b5061021d6108e2565b34801561037c57600080fd5b5061027a61038b366004612815565b6001600160a01b031660009081526033602052604090205490565b3480156103b257600080fd5b506102dd6108fb565b3480156103c757600080fd5b506102dd6103d63660046129a5565b610930565b3480156103e757600080fd5b506102dd6103f6366004612a95565b610aca565b34801561040757600080fd5b506102dd6104163660046129a5565b610b94565b34801561042757600080fd5b506102556104363660046129bd565b610b9e565b34801561044757600080fd5b506101f2610baa565b61027a61045e3660046129a5565b610bb9565b34801561046f57600080fd5b5061025561047e366004612960565b610f50565b34801561048f57600080fd5b5061025561049e366004612960565b610fe9565b3480156104af57600080fd5b5061027a610ff6565b3480156104c457600080fd5b506102dd6104d33660046128e2565b61103a565b3480156104e457600080fd5b506102dd6104f33660046129bd565b61119e565b34801561050457600080fd5b5061050d6111de565b604080519586526020860194909452928401919091526060830152608082015260a0016101ff565b34801561054157600080fd5b506102dd6105503660046129a5565b61122d565b34801561056157600080fd5b5061027a61057036600461282f565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3480156105a757600080fd5b506102dd6105b6366004612861565b611429565b3480156105c757600080fd5b506102dd6105d6366004612960565b6117c2565b3480156105e757600080fd5b506105fb6105f63660046129a5565b61189a565b60405161ffff90911681526020016101ff565b60606036805461061d90612d63565b80601f016020809104026020016040519081016040528092919081815260200182805461064990612d63565b80156106965780601f1061066b57610100808354040283529160200191610696565b820191906000526020600020905b81548152906001019060200180831161067957829003601f168201915b5050505050905090565b60006106aa6118fb565b600101546001600160a01b0316919050565b60006106c933848461191f565b5060015b92915050565b6040805160048152602481019091526020810180516001600160e01b031663050e823560e21b179052600090819061070a90611a43565b9050808060200190518101906107209190612a7d565b91505090565b6000610733848484611a63565b6001600160a01b0384166000908152603460209081526040808320338452909152902054828110156107bd5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6107ca853385840361191f565b60019150505b9392505050565b600080516020612e00833981519152336107f18282611c31565b61080d5760405162461bcd60e51b81526004016107b490612b7e565b6108178484611c69565b50505050565b60006108276118fb565b6005015460ff16919050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490916106c991859061086a908690612cc9565b61191f565b6001600160a01b0381166000908152603360205260408120546106cd90610894610899565b611ce4565b60006108a460355490565b6108b55750670de0b6b3a764000090565b603554670de0b6b3a76400006108c9610ff6565b6108d39190612d01565b6108dd9190612ce1565b905090565b60006108ec6118fb565b546001600160a01b0316919050565b6040805160048152602481019091526020810180516001600160e01b0316631f5f0a8760e21b17905261092d90611a43565b50565b7feba135a74248c737f901cbd8d0f53e729a3f212e734748c2e0d8d39096125e5c60008190527f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb853605366020527fd51fad483e9bd4fa5dd43c95a6dde60b73fec1248ce54775bb96529d1141aa1b54600080516020612e208339815191529060ff16156109cc5760405162461bcd60e51b81526004016107b490612c92565b60008281526002820160205260409020805460ff1916600117905582610a305760405162461bcd60e51b8152602060048201526019602482015278054656c6c65723a2063616e6e6f74207769746864726177203603c1b60448201526064016107b4565b610a386106d3565b831115610a575760405162461bcd60e51b81526004016107b490612c48565b6000610a61610899565b90506000610a6f8583611d03565b610a7a906001612cc9565b9050610a853361038b565b811115610aa45760405162461bcd60e51b81526004016107b490612bb5565b610aae8186611d18565b5050600091825260020160205260409020805460ff1916905550565b7f70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d22152933610af68282611c31565b610b125760405162461bcd60e51b81526004016107b490612b7e565b83610b1b6118fb565b6003016000828254610b2d9190612cc9565b90915550839050610b3c6118fb565b6004016000828254610b4e9190612cc9565b9091555050604080518581526020810185905233917fc091ac0b81e7f83b1bd632697aab4fe32a683168ca5ca7ad8075b49c3e669c4a910160405180910390a250505050565b61092d8133611d9d565b60006107d08383611c31565b60606037805461061d90612d63565b7ffdf81848136595c31bb5f76217767372bc4bf906663038eb38381131ea27ecba60008181527f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb853605366020527fa8b4b8db2d6e615394be6b6e7c62c4b724469d7ac9026422a171f9c66a50d83f54909190600080516020612e208339815191529060ff1615610c585760405162461bcd60e51b81526004016107b490612c92565b60008281526002820160205260409020805460ff1916600117905583610cb85760405162461bcd60e51b8152602060048201526015602482015274054656c6c65723a2063616e6e6f74206d696e74203605c1b60448201526064016107b4565b6000306001600160a01b0316633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610cf557600080fd5b505af1158015610d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2d9190612a7d565b90506000610d3b8683611d03565b905060008111610d9d5760405162461bcd60e51b815260206004820152602760248201527f54656c6c65723a20616d6f756e7420746f206265206d696e7465642063616e6e60448201526606f7420626520360cc1b60648201526084016107b4565b3415610ecf57610dab6118fb565b6005015462010000900460ff16610e155760405162461bcd60e51b815260206004820152602860248201527f54656c6c65723a2076616c756520676976656e20666f72206e6f6e206e6174696044820152673b32903a37b5b2b760c11b60648201526084016107b4565b853414610e645760405162461bcd60e51b815260206004820152601760248201527f54656c6c65723a20696e636f72726563742076616c756500000000000000000060448201526064016107b4565b610e6c6118fb565b5460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0913491600480830192600092919082900301818588803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b5050505050610eec565b610eec610eda6118fb565b546001600160a01b0316333089611e14565b610ef63382611e7f565b604080518281526020810188905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a2935050600091825260020160205260409020805460ff19169055919050565b3360009081526034602090815260408083206001600160a01b038616845290915281205482811015610fd25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107b4565b610fdf338585840361191f565b5060019392505050565b60006106c9338484611a63565b60006110006106d3565b61100a9082612cc9565b90506110146118fb565b600201546110229082612cc9565b905061102c6118fb565b600301546108dd9082612d20565b600080516020612e00833981519152336110548282611c31565b6110705760405162461bcd60e51b81526004016107b490612b7e565b6110818563475c5f8560e01b611f5e565b6110e75760405162461bcd60e51b815260206004820152603160248201527f54656c6c65723a20737472617465677920646f6573206e6f7420737570706f7260448201527074204954546f6b656e537472617465677960781b60648201526084016107b4565b846110f06118fb565b60010180546001600160a01b0319166001600160a01b039290921691909117905582156111585761115684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a4392505050565b505b604080516001600160a01b0387168152905133917f7a587acd0fd101cfe7d6d98bad768e91209a7ae91e55c3702570425bf0eae9bc919081900360200190a25050505050565b600080516020612e00833981519152336111b88282611c31565b6111d45760405162461bcd60e51b81526004016107b490612b7e565b6108178484611d9d565b60008060008060006111ee6106d3565b94506111f86118fb565b6002015493506112066118fb565b6003015492506112146118fb565b6004015491506112248385612d20565b90509091929394565b7feba135a74248c737f901cbd8d0f53e729a3f212e734748c2e0d8d39096125e5c60008190527f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb853605366020527fd51fad483e9bd4fa5dd43c95a6dde60b73fec1248ce54775bb96529d1141aa1b54600080516020612e208339815191529060ff16156112c95760405162461bcd60e51b81526004016107b490612c92565b60008281526002820160205260409020805460ff191660011790558261132d5760405162461bcd60e51b8152602060048201526019602482015278054656c6c65723a2063616e6e6f74207769746864726177203603c1b60448201526064016107b4565b6113363361038b565b8311156113555760405162461bcd60e51b81526004016107b490612bb5565b600061136384610894610899565b9050600081116113dd576040805162461bcd60e51b81526020600482015260248101919091527f54656c6c65723a20756e6465726c79696e672074656c6c657220746f6b656e2060448201527f76616c756520746f2062652072656465656d65642063616e6e6f74206265203060648201526084016107b4565b6113e56106d3565b8111156114045760405162461bcd60e51b81526004016107b490612c48565b61140e8482611d18565b50600091825260020160205260409020805460ff1916905550565b600054610100900460ff1680611442575060005460ff16155b61145e5760405162461bcd60e51b81526004016107b490612bfa565b600054610100900460ff16158015611480576000805461ffff19166101011790555b333b6114ce5760405162461bcd60e51b815260206004820152601f60248201527f54656c6c65723a20636f6e74726f6c6c6572206e6f7420636f6e74726163740060448201526064016107b4565b823b61152a5760405162461bcd60e51b815260206004820152602560248201527f54656c6c65723a20756e6465726c79696e6720746f6b656e206e6f7420636f6e6044820152641d1c9858dd60da1b60648201526084016107b4565b6115547f70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d22152933611c69565b61156c600080516020612e0083398151915285611c69565b826115756118fb565b80546001600160a01b0319166001600160a01b03929092169190911790556116e761159e6118fb565b54604080516306fdde0360e01b815290516001600160a01b03909216916306fdde0391600480820192600092909190829003018186803b1580156115e157600080fd5b505afa1580156115f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261161d91908101906129df565b60405160200161162d9190612af3565b6040516020818303038152906040526116446118fb565b54604080516395d89b4160e01b815290516001600160a01b03909216916395d89b4191600480820192600092909190829003018186803b15801561168757600080fd5b505afa15801561169b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c391908101906129df565b6040516020016116d39190612b22565b604051602081830303815290604052611f7a565b6116ef6118fb565b546040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612ab6565b6117726118fb565b600501805460ff191660ff92909216919091179055816117906118fb565b6005018054911515620100000262ff0000199092169190911790558015610817576000805461ff001916905550505050565b7f70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d221529336117ee8282611c31565b61180a5760405162461bcd60e51b81526004016107b490612b7e565b6040516024810184905261185c90632e1a7d4d60e01b906044015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a43565b50826118666118fb565b60020160008282546118789190612cc9565b9091555061081790506118896118fb565b546001600160a01b03168585611ffa565b6000806118a56118fb565b600301546118b16118fb565b600201546118bf9190612d20565b90506000816118cc6106d3565b6118d69190612cc9565b905080156118f4576118f16118eb8584612cc9565b8261202a565b92505b5050919050565b7ff72b349e2c69862bdc86afd2a363bf16c24bd97d10f7ac9d49f7e2eedebba2b490565b6001600160a01b0383166119815760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107b4565b6001600160a01b0382166119e25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107b4565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60606106cd611a506118fb565b600101546001600160a01b03168361205f565b6001600160a01b038316611ac75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016107b4565b6001600160a01b038216611b295760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016107b4565b6001600160a01b03831660009081526033602052604090205481811015611ba15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016107b4565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611bd8908490612cc9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c2491815260200190565b60405180910390a3610817565b6000918252600080516020612e20833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611c738282611c31565b15611c7c575050565b6000828152600080516020612e20833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000670de0b6b3a7640000611cf98385612d01565b6107d09190612ce1565b600081611cf9670de0b6b3a764000085612d01565b611d223383612084565b60405160248101829052611d4190632e1a7d4d60e01b90604401611825565b50611d5e611d4d6118fb565b546001600160a01b03163383611ffa565b604080518381526020810183905233917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929910160405180910390a25050565b611da78282611c31565b611daf575050565b6000828152600080516020612e20833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b03808516602483015283166044820152606481018290526108179085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121d2565b6001600160a01b038216611ed55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107b4565b8060356000828254611ee79190612cc9565b90915550506001600160a01b03821660009081526033602052604081208054839290611f14908490612cc9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000611f69836122a4565b80156107d057506107d083836122d7565b600054610100900460ff1680611f93575060005460ff16155b611faf5760405162461bcd60e51b81526004016107b490612bfa565b600054610100900460ff16158015611fd1576000805461ffff19166101011790555b611fd96123c0565b611fe3838361242b565b8015611ff5576000805461ff00191690555b505050565b6040516001600160a01b038316602482015260448101829052611ff590849063a9059cbb60e01b90606401611e48565b60008115612056576120518261204261271086612d01565b61204c9190612ce1565b6124c0565b6107d0565b50600092915050565b60606107d08383604051806060016040528060278152602001612dd960279139612527565b6001600160a01b0382166120e45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016107b4565b6001600160a01b038216600090815260336020526040902054818110156121585760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016107b4565b6001600160a01b0383166000908152603360205260408120838303905560358054849290612187908490612d20565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000612227826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125f19092919063ffffffff16565b805190915015611ff557808060200190518101906122459190612989565b611ff55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107b4565b60006122b7826301ffc9a760e01b6122d7565b80156106cd57506122d0826001600160e01b03196122d7565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061233e908690612ad7565b6000604051808303818686fa925050503d806000811461237a576040519150601f19603f3d011682016040523d82523d6000602084013e61237f565b606091505b509150915060208151101561239a57600093505050506106cd565b8180156123b65750808060200190518101906123b69190612989565b9695505050505050565b600054610100900460ff16806123d9575060005460ff16155b6123f55760405162461bcd60e51b81526004016107b490612bfa565b600054610100900460ff16158015612417576000805461ffff19166101011790555b801561092d576000805461ff001916905550565b600054610100900460ff1680612444575060005460ff16155b6124605760405162461bcd60e51b81526004016107b490612bfa565b600054610100900460ff16158015612482576000805461ffff19166101011790555b8251612495906036906020860190612769565b5081516124a9906037906020850190612769565b508015611ff5576000805461ff0019169055505050565b600061ffff8211156125235760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b60648201526084016107b4565b5090565b6060833b6125865760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107b4565b600080856001600160a01b0316856040516125a19190612ad7565b600060405180830381855af49150503d80600081146125dc576040519150601f19603f3d011682016040523d82523d6000602084013e6125e1565b606091505b50915091506123b6828286612608565b60606126008484600085612641565b949350505050565b606083156126175750816107d0565b8251156126275782518084602001fd5b8160405162461bcd60e51b81526004016107b49190612b4b565b6060824710156126a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107b4565b843b6126f05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107b4565b600080866001600160a01b0316858760405161270c9190612ad7565b60006040518083038185875af1925050503d8060008114612749576040519150601f19603f3d011682016040523d82523d6000602084013e61274e565b606091505b509150915061275e828286612608565b979650505050505050565b82805461277590612d63565b90600052602060002090601f01602090048101928261279757600085556127dd565b82601f106127b057805160ff19168380011785556127dd565b828001600101855582156127dd579182015b828111156127dd5782518255916020019190600101906127c2565b506125239291505b8082111561252357600081556001016127e5565b80356001600160a01b038116811461281057600080fd5b919050565b600060208284031215612826578081fd5b6107d0826127f9565b60008060408385031215612841578081fd5b61284a836127f9565b9150612858602084016127f9565b90509250929050565b600080600060608486031215612875578081fd5b61287e846127f9565b925061288c602085016127f9565b9150604084013561289c81612dca565b809150509250925092565b6000806000606084860312156128bb578283fd5b6128c4846127f9565b92506128d2602085016127f9565b9150604084013590509250925092565b6000806000604084860312156128f6578283fd5b6128ff846127f9565b9250602084013567ffffffffffffffff8082111561291b578384fd5b818601915086601f83011261292e578384fd5b81358181111561293c578485fd5b87602082850101111561294d578485fd5b6020830194508093505050509250925092565b60008060408385031215612972578182fd5b61297b836127f9565b946020939093013593505050565b60006020828403121561299a578081fd5b81516107d081612dca565b6000602082840312156129b6578081fd5b5035919050565b600080604083850312156129cf578182fd5b82359150612858602084016127f9565b6000602082840312156129f0578081fd5b815167ffffffffffffffff80821115612a07578283fd5b818401915084601f830112612a1a578283fd5b815181811115612a2c57612a2c612db4565b604051601f8201601f19908116603f01168101908382118183101715612a5457612a54612db4565b81604052828152876020848701011115612a6c578586fd5b61275e836020830160208801612d37565b600060208284031215612a8e578081fd5b5051919050565b60008060408385031215612aa7578182fd5b50508035926020909101359150565b600060208284031215612ac7578081fd5b815160ff811681146107d0578182fd5b60008251612ae9818460208701612d37565b9190910192915050565b6602a32b63632b9160cd1b815260008251612b15816007850160208701612d37565b9190910160070192915050565b601d60fa1b815260008251612b3e816001850160208701612d37565b9190910160010192915050565b6020815260008251806020840152612b6a816040850160208701612d37565b601f01601f19169190910160400192915050565b6020808252601d908201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a6564000000604082015260600190565b60208082526025908201527f54656c6c65723a2072656465656d20616d6f756e7420657863656564732062616040820152646c616e636560d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f54656c6c65723a2072656465656d2074746f6b656e206c70206e6f7420656e6f60408201526975676820737570706c7960b01b606082015260800190565b60208082526018908201527f416363657373436f6e74726f6c3a207265656e74657265640000000000000000604082015260600190565b60008219821115612cdc57612cdc612d9e565b500190565b600082612cfc57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d1b57612d1b612d9e565b500290565b600082821015612d3257612d32612d9e565b500390565b60005b83811015612d52578181015183820152602001612d3a565b838111156108175750506000910152565b600181811c90821680612d7757607f821691505b60208210811415612d9857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461092d57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564df8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec427b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb85360534a26469706673582212200e61627130387291382ad32200992083890e478bec09d949e53198c2d2b9bd7e64736f6c63430008040033",
  "devdoc": {
    "author": "develop@teller.finance",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "balanceOfUnderlying(address)": {
        "params": {
          "account": "Address to calculate the underlying balance."
        },
        "returns": {
          "_0": "balance_ the balance of the account"
        }
      },
      "currentTVL()": {
        "returns": {
          "tvl_": "The value locked in the pool. Note: This value includes the amount that is on loan (including ones that were sent to EOAs)."
        }
      },
      "debtRatioFor(uint256)": {
        "params": {
          "newLoanAmount": "the new loan amount to consider the StD ratio."
        },
        "returns": {
          "ratio_": "The debt ratio for lending pool."
        }
      },
      "decimals()": {
        "returns": {
          "_0": "decimals of the token"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "exchangeRate()": {
        "returns": {
          "rate_": "The current exchange rate, scaled by the EXCHANGE_RATE_FACTOR."
        }
      },
      "fundLoan(address,uint256)": {
        "params": {
          "amount": "Funds requested to fulfil the loan.",
          "recipient": "The account to send the funds to."
        }
      },
      "getMarketState()": {
        "returns": {
          "totalBorrowed": "Total amount borrowed through loans.",
          "totalInterestRepaid": "The total amount interest repaid till the current timestamp.",
          "totalOnLoan": "Total amount currently deployed in loans.",
          "totalRepaid": "The total amount repaid till the current timestamp.",
          "totalSupplied": "Total amount of the underlying asset supplied."
        }
      },
      "getStrategy()": {
        "returns": {
          "_0": "address of the strategy contract"
        }
      },
      "grantRole(bytes32,address)": {
        "params": {
          "account": "Address to give the {role} to. Requirements:  - Sender must be role admin.",
          "role": "Encoding of the role to give."
        }
      },
      "hasRole(bytes32,address)": {
        "params": {
          "account": "Address to check the {role} for.",
          "role": "Encoding of the role to check."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,bool)": {
        "params": {
          "admin": "address of the admin to the respective Teller Token",
          "isWrappedNative": "boolean indicating the underlying asset is the wrapped native token Requirements:  - Underlying token must implement `name`, `symbol` and `decimals`",
          "underlying": "address of the ERC20 token"
        }
      },
      "mint(uint256)": {
        "details": "The tToken contract needs to have been granted sufficient allowance to transfer the amount being used to mint.",
        "params": {
          "amount": "The amount of underlying tokens to use to mint."
        },
        "returns": {
          "_0": "Amount of TTokens minted."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "redeem(uint256)": {
        "params": {
          "amount": "The amount of Teller tokens to redeem."
        }
      },
      "redeemUnderlying(uint256)": {
        "params": {
          "amount": "The amount of underlying tokens to redeem."
        }
      },
      "renounceRole(bytes32)": {
        "params": {
          "role": "Encoding of the role to remove."
        }
      },
      "repayLoan(uint256,uint256)": {
        "params": {
          "amount": "Funds deposited back into the pool to repay the principal amount of a loan.",
          "interestAmount": "Interest value paid into the pool from a loan."
        }
      },
      "revokeRole(bytes32,address)": {
        "params": {
          "account": "Address to remove the {role} from. Requirements:  - Sender must be role admin.",
          "role": "Encoding of the role to remove."
        }
      },
      "setStrategy(address,bytes)": {
        "params": {
          "initData": "Optional data to initialize the strategy. Requirements:  - Sender must have ADMIN role",
          "strategy": "Address to the new strategy contract. Must implement the {ITTokenStrategy} interface."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "totalUnderlyingSupply()": {
        "returns": {
          "_0": "totalSupply_ the total supply denoted in the underlying asset."
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "underlying()": {
        "returns": {
          "_0": "ERC20 token that is the underlying asset"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LoanFunded(address,uint256)": {
        "notice": "This event is emitted when a loan has been taken out through the Teller Diamond."
      },
      "LoanPaymentMade(address,uint256,uint256)": {
        "notice": "This event is emitted when a loan has been repaid through the Teller Diamond."
      },
      "Mint(address,uint256,uint256)": {
        "notice": "This event is emitted when a user deposits tokens into the pool."
      },
      "Redeem(address,uint256,uint256)": {
        "notice": "This event is emitted when a user withdraws tokens from the pool."
      },
      "StrategySet(address,address)": {
        "notice": "This event is emitted when a new investment management strategy has been set for a Teller token."
      }
    },
    "kind": "user",
    "methods": {
      "balanceOfUnderlying(address)": {
        "notice": "The balance of an {account} denoted in underlying value."
      },
      "constructor": {
        "notice": "To prevent the initialization of this TToken implementation contract, we call the initializer modifier.  This prevents someone from:      1. Becoming the ADMIN of the implementation contract      2. Setting a strategy      3. Calling a malicious function on the strategy that destroys the logic contract"
      },
      "currentTVL()": {
        "notice": "Calculates the current Total Value Locked, denoted in the underlying asset, in the Teller Token pool."
      },
      "debtRatioFor(uint256)": {
        "notice": "It validates whether supply to debt (StD) ratio is valid including the loan amount."
      },
      "decimals()": {
        "notice": "it returns the decimal places of the respective TToken"
      },
      "exchangeRate()": {
        "notice": "It calculates the current scaled exchange rate for a whole Teller Token based of the underlying token balance."
      },
      "fundLoan(address,uint256)": {
        "notice": "Called by the Teller Diamond contract when a loan has been taken out and requires funds."
      },
      "getMarketState()": {
        "notice": "It calculates the market state values across a given market.Returns values that represent the global state across the market."
      },
      "getStrategy()": {
        "notice": "Gets the strategy used for balancing funds."
      },
      "grantRole(bytes32,address)": {
        "notice": "Grants an account a new role."
      },
      "hasRole(bytes32,address)": {
        "notice": "Checks if an account has a specific role."
      },
      "initialize(address,address,bool)": {
        "notice": "it initializes the Teller Token"
      },
      "mint(uint256)": {
        "notice": "Deposit underlying token amount into LP and mint tokens."
      },
      "rebalance()": {
        "notice": "Rebalances the funds controlled by Teller Token according to the current strategy. See {TTokenStrategy}."
      },
      "redeem(uint256)": {
        "notice": "Redeem supplied Teller tokens for underlying value."
      },
      "redeemUnderlying(uint256)": {
        "notice": "Redeem supplied underlying value."
      },
      "renounceRole(bytes32)": {
        "notice": "Removes a role from the sender."
      },
      "repayLoan(uint256,uint256)": {
        "notice": "Called by the Teller Diamond contract when a loan has been repaid."
      },
      "revokeRole(bytes32,address)": {
        "notice": "Removes a role from an account."
      },
      "setStrategy(address,bytes)": {
        "notice": "Sets or updates a strategy to use for balancing funds."
      },
      "totalUnderlyingSupply()": {
        "notice": "It calculates the total supply of the underlying asset."
      },
      "underlying()": {
        "notice": "The token that is the underlying asset for this Teller token."
      }
    },
    "notice": "This contract represents a lending pool for an asset within Teller protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5265,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5268,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8562,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6610,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6616,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6618,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 6620,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 6622,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 7163,
        "contract": "contracts/lending/ttoken/TToken_V3.sol:TToken_V3",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}