{
  "address": "0x28BcD96049D7916fd0183710649388B89057644e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DICT",
      "outputs": [
        {
          "internalType": "contract TellerNFTDictionary",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "V1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "convertV1TokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseLoanSize",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contributionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contributionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "contributionMultiplier",
              "type": "uint16"
            }
          ],
          "internalType": "struct TellerNFT_V2.Tier[]",
          "name": "newTiers",
          "type": "tuple[]"
        },
        {
          "internalType": "string[][]",
          "name": "tierHashes",
          "type": "string[][]"
        }
      ],
      "name": "createTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "diamond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "owned_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTierId",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "tierId_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "tierTokenId_",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "tierIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractURIHash",
          "type": "string"
        }
      ],
      "name": "setContractURIHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tierCount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "tierTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseLoanSize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contributionAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "contributionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "contributionMultiplier",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenBaseLoanSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContributionAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContributionMultiplier",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContributionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "artifactName": "MainnetTellerNFT",
  "transactionHash": "0xff8dc2eabaf7e766a864dfbea245e25fbba0b0b60f6447d7f5c1dccd1977320c",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x28BcD96049D7916fd0183710649388B89057644e",
    "transactionIndex": 95,
    "gasUsed": "3029175",
    "logsBloom": "0x
    "blockHash": "0xdd97b280ffe5f3c8e60c54d86d15344eaf4895a68c8e5e60f549662d09a808d6",
    "transactionHash": "0xff8dc2eabaf7e766a864dfbea245e25fbba0b0b60f6447d7f5c1dccd1977320c",
    "logs": [],
    "blockNumber": 12916093,
    "cumulativeGasUsed": "11519463",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "024bbf3e3b42e5aa637b720e61006e06",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DICT\",\"outputs\":[{\"internalType\":\"contract TellerNFTDictionary\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"convertV1TokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseLoanSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contributionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"contributionMultiplier\",\"type\":\"uint16\"}],\"internalType\":\"struct TellerNFT_V2.Tier[]\",\"name\":\"newTiers\",\"type\":\"tuple[]\"},{\"internalType\":\"string[][]\",\"name\":\"tierHashes\",\"type\":\"string[][]\"}],\"name\":\"createTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"owned_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTierId\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"tierId_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tierTokenId_\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tierIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURIHash\",\"type\":\"string\"}],\"name\":\"setContractURIHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierCount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"tierTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseLoanSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contributionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"contributionMultiplier\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenBaseLoanSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContributionAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContributionMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContributionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"contractURI()\":{\"returns\":{\"_0\":\"the contract URI hash\"}},\"convertV1TokenId(uint256)\":{\"params\":{\"_tokenId\":\"the tokenId to look up\"}},\"createTiers((uint256,address,uint256,uint16)[],string[][])\":{\"details\":\"It auto increments the index of the next tier to add.\",\"params\":{\"newTiers\":\"Information about the new tiers to add.\",\"tierHashes\":\"Metadata hashes belonging to the tiers. Requirements:  - Caller must have the {ADMIN} role\"}},\"getOwnedTokens(address)\":{\"details\":\"It uses a EnumerableSet to store values and loops over each element to add to the array.Can be costly if calling within a contract for address with many tokens.\",\"returns\":{\"owned_\":\"the array of tokenIDs owned by the address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenTierId(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to get Tier info.\"},\"returns\":{\"tierId_\":\"the index of the tier the tokenId belongs to\",\"tierTokenId_\":\"the tokenId in tier\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(bytes)\":{\"params\":{\"data\":\"Bytes to init the token with.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint128,uint128)\":{\"params\":{\"owner\":\"The owner of the new token. Requirements:  - Caller must be an authorized minter\",\"tierIndex\":\"Tier to mint token on.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setContractURIHash(string)\":{\"params\":{\"contractURIHash\":\"The hash to the initial contract level metadata.\"}},\"setURI(string)\":{\"details\":\"See {_setURI}. Requirements: - `newURI` must be prepended with a forward slash (/)\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"the identifier of the interface\"},\"returns\":{\"_0\":\"bool stating whether or not our interface is supported\"}},\"tokenBaseLoanSize(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to get info.\"}},\"tokenContributionAsset(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to get info.\"}},\"tokenContributionMultiplier(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to get info.\"}},\"tokenContributionSize(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to get info.\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"The contract metadata URI.\"},\"convertV1TokenId(uint256)\":{\"notice\":\"it performs a reverse look up on by finding our ID using the tokenURI hash using the NFT dictionary. Required that the token id exists\"},\"createTiers((uint256,address,uint256,uint16)[],string[][])\":{\"notice\":\"Creates new Tiers to be minted with the given information.\"},\"getOwnedTokens(address)\":{\"notice\":\"It returns an array of token IDs owned by an address.\"},\"getTokenTierId(uint256)\":{\"notice\":\"It returns information about a Tier for a token ID.\"},\"initialize(bytes)\":{\"notice\":\"Initializes the TellerNFT.\"},\"mint(address,uint128,uint128)\":{\"notice\":\"It mints a new token for a Tier index.\"},\"setContractURIHash(string)\":{\"notice\":\"Sets the contract level metadata URI hash.\"},\"supportsInterface(bytes4)\":{\"notice\":\"checks if an interface is supported by ITellerNFT or AccessControlUpgradeable\"},\"tokenBaseLoanSize(uint256)\":{\"notice\":\"It returns Base Loan Size for a token ID.\"},\"tokenContributionAsset(uint256)\":{\"notice\":\"It returns Contribution Asset for a token ID.\"},\"tokenContributionMultiplier(uint256)\":{\"notice\":\"It returns Contribution Multiplier for a token ID.\"},\"tokenContributionSize(uint256)\":{\"notice\":\"It returns Contribution Size for a token ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/mainnet/MainnetTellerNFT.sol\":\"MainnetTellerNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa51e24ce76a2fe7a63627bb0a11e23ab04ccc6a1bb1dd3e1a61ffbe3e419de7c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x25b6d946bf6d0f7ad470298f424e3235a14bab6a8d4a553465f76ca9d3f6358f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdf3a49167ee6c6ba60205aa5eefe29d3ff340b73d7326733eb53f440371b717e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06971bd1720c85e4771b94c83eb1e058af6070f6f6306ebc874a11501b238b8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/nft/IStakeableNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStakeableNFT {\\n    function tokenBaseLoanSize(uint256 tokenId) external view returns (uint256);\\n\\n    function tokenURIHash(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function tokenContributionAsset(uint256 tokenId)\\n        external\\n        view\\n        returns (address);\\n\\n    function tokenContributionSize(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenContributionMultiplier(uint256 tokenId)\\n        external\\n        view\\n        returns (uint8);\\n}\\n\",\"keccak256\":\"0xfbf44350ad91a54de26f39195d714580d7dade556ea4c7991a51eef5aa839105\",\"license\":\"MIT\"},\"contracts/nft/TellerNFTDictionary.sol\":{\"content\":\"/**\\n * @notice TellerNFTDictionary Version 1.02\\n *\\n * @notice This contract is used to gather data for TellerV1 NFTs more efficiently.\\n * @notice This contract has data which must be continuously synchronized with the TellerV1 NFT data\\n *\\n * @author develop@teller.finance\\n */\\n\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IStakeableNFT.sol\\\";\\n\\n/**\\n * @notice This contract is used by borrowers to call Dapp functions (using delegate calls).\\n * @notice This contract should only be constructed using it's upgradeable Proxy contract.\\n * @notice In order to call a Dapp function, the Dapp must be added in the DappRegistry instance.\\n *\\n * @author develop@teller.finance\\n */\\ncontract TellerNFTDictionary is IStakeableNFT, AccessControlUpgradeable {\\n    struct Tier {\\n        uint256 baseLoanSize;\\n        string[] hashes;\\n        address contributionAsset;\\n        uint256 contributionSize;\\n        uint8 contributionMultiplier;\\n    }\\n\\n    mapping(uint256 => uint256) public baseLoanSizes;\\n    mapping(uint256 => string[]) public hashes;\\n    mapping(uint256 => address) public contributionAssets;\\n    mapping(uint256 => uint256) public contributionSizes;\\n    mapping(uint256 => uint8) public contributionMultipliers;\\n\\n    /* Constants */\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\n    /* State Variables */\\n\\n    mapping(uint256 => uint256) public _tokenTierMappingCompressed;\\n    bool public _tokenTierMappingCompressedSet;\\n\\n    /* Modifiers */\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, _msgSender()), \\\"TellerNFTDictionary: not admin\\\");\\n        _;\\n    }\\n\\n    function initialize(address initialAdmin) public {\\n        _setupRole(ADMIN, initialAdmin);\\n        _setRoleAdmin(ADMIN, ADMIN);\\n\\n        __AccessControl_init();\\n    }\\n\\n    /* External Functions */\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param tokenId ID of the token to get Tier info.\\n     */\\n    function getTokenTierIndex(uint256 tokenId)\\n        public\\n        view\\n        returns (uint8 index_)\\n    {\\n        //32 * 8 = 256 - each uint256 holds the data of 32 tokens . 8 bits each.\\n\\n        uint256 mappingIndex = tokenId / 32;\\n\\n        uint256 compressedRegister = _tokenTierMappingCompressed[mappingIndex];\\n\\n        //use 31 instead of 32 to account for the '0x' in the start.\\n        //the '31 -' reverses our bytes order which is necessary\\n\\n        uint256 offset = ((31 - (tokenId % 32)) * 8);\\n\\n        uint8 tierIndex = uint8((compressedRegister >> offset));\\n\\n        return tierIndex;\\n    }\\n\\n    function getTierHashes(uint256 tierIndex)\\n        external\\n        view\\n        returns (string[] memory)\\n    {\\n        return hashes[tierIndex];\\n    }\\n\\n    /**\\n     * @notice Adds a new Tier to be minted with the given information.\\n     * @dev It auto increments the index of the next tier to add.\\n     * @param newTier Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setTier(uint256 index, Tier memory newTier)\\n        external\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        baseLoanSizes[index] = newTier.baseLoanSize;\\n        hashes[index] = newTier.hashes;\\n        contributionAssets[index] = newTier.contributionAsset;\\n        contributionSizes[index] = newTier.contributionSize;\\n        contributionMultipliers[index] = newTier.contributionMultiplier;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets the tiers for each tokenId using compressed data.\\n     * @param tiersMapping Information about the new tiers to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setAllTokenTierMappings(uint256[] memory tiersMapping)\\n        public\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        require(\\n            !_tokenTierMappingCompressedSet,\\n            \\\"TellerNFTDictionary: token tier mapping already set\\\"\\n        );\\n        for (uint256 i = 0; i < tiersMapping.length; i++) {\\n            _tokenTierMappingCompressed[i] = tiersMapping[i];\\n        }\\n\\n        _tokenTierMappingCompressedSet = true;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets the tiers for each tokenId using compressed data.\\n     * @param index the mapping row, each holds data for 32 tokens\\n     * @param tierMapping Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setTokenTierMapping(uint256 index, uint256 tierMapping)\\n        public\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        _tokenTierMappingCompressed[index] = tierMapping;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets a specific tier for a specific tokenId using compressed data.\\n     * @param tokenIds the NFT token Ids for which to add data\\n     * @param tokenTier the index of the tier that these tokenIds should have\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setTokenTierForTokenIds(\\n        uint256[] calldata tokenIds,\\n        uint256 tokenTier\\n    ) public onlyAdmin returns (bool) {\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            setTokenTierForTokenId(tokenIds[i], tokenTier);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets a specific tier for a specific tokenId using compressed data.\\n     * @param tokenId the NFT token Id for which to add data\\n     * @param tokenTier the index of the tier that these tokenIds should have\\n     *\\n     * Requirements:\\n     *  - Caller must have the {Admin} role\\n     */\\n    function setTokenTierForTokenId(uint256 tokenId, uint256 tokenTier)\\n        public\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        uint256 mappingIndex = tokenId / 32;\\n\\n        uint256 existingRegister = _tokenTierMappingCompressed[mappingIndex];\\n\\n        uint256 offset = ((31 - (tokenId % 32)) * 8);\\n\\n\\n            uint256 updateMaskShifted\\n         = 0x00000000000000000000000000000000000000000000000000000000000000FF <<\\n            offset;\\n\\n        uint256 updateMaskShiftedNegated = ~updateMaskShifted;\\n\\n\\n            uint256 tokenTierShifted\\n         = ((0x0000000000000000000000000000000000000000000000000000000000000000 |\\n            tokenTier) << offset);\\n\\n        uint256 existingRegisterClearedWithMask = existingRegister &\\n            updateMaskShiftedNegated;\\n\\n        uint256 updatedRegister = existingRegisterClearedWithMask |\\n            tokenTierShifted;\\n\\n        _tokenTierMappingCompressed[mappingIndex] = updatedRegister;\\n\\n        return true;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IStakeableNFT).interfaceId ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n        New methods for the dictionary\\n    */\\n\\n    /**\\n     * @notice It returns Base Loan Size for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenBaseLoanSize(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        return baseLoanSizes[tokenTier];\\n    }\\n\\n    /**\\n     * @notice It returns Token URI Hash for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenURIHash(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        string[] memory tierImageHashes = hashes[tokenTier];\\n        return tierImageHashes[tokenId % (tierImageHashes.length)];\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Asset for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionAsset(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        return contributionAssets[tokenTier];\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Size for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionSize(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        return contributionSizes[tokenTier];\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Multiplier for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionMultiplier(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint8)\\n    {\\n        uint8 tokenTier = getTokenTierIndex(tokenId);\\n\\n        return contributionMultipliers[tokenTier];\\n    }\\n}\\n\",\"keccak256\":\"0x835df0c32c322bd5d3a653b47271cd92876bce41f3bc9a426146464c7c31c959\"},\"contracts/nft/TellerNFT_V2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport {\\n    ERC1155Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n// Libraries\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                                  THIS CONTRACT IS UPGRADEABLE!                                  **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of or PREPEND any storage variables to this or new versions of this    **/\\n/**  contract as this will cause the the storage slots to be overwritten on the proxy contract!!    **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice This contract is used by borrowers to call Dapp functions (using delegate calls).\\n * @notice This contract should only be constructed using it's upgradeable Proxy contract.\\n * @notice In order to call a Dapp function, the Dapp must be added in the DappRegistry instance.\\n *\\n * @author develop@teller.finance\\n */\\nabstract contract TellerNFT_V2 is ERC1155Upgradeable, AccessControlUpgradeable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /* Constants */\\n    string public constant name = \\\"Teller NFT\\\";\\n    string public constant symbol = \\\"TNFT\\\";\\n\\n    uint256 private constant ID_PADDING = 10000;\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\n    /* State Variables */\\n\\n    struct Tier {\\n        uint256 baseLoanSize;\\n        address contributionAsset;\\n        uint256 contributionSize;\\n        uint16 contributionMultiplier;\\n    }\\n\\n    // It holds the total number of tokens in existence.\\n    uint256 public totalSupply;\\n\\n    // It holds the information about a tier.\\n    mapping(uint256 => Tier) public tiers;\\n\\n    // It holds the total number of tiers.\\n    uint128 public tierCount;\\n\\n    // It holds how many tokens types exists in a tier.\\n    mapping(uint128 => uint256) public tierTokenCount;\\n\\n    // It holds a set of tokenIds for an owner address\\n    mapping(address => EnumerableSet.UintSet) internal _ownedTokenIds;\\n\\n    // It holds the URI hash containing the token metadata\\n    mapping(uint256 => string) internal _idToUriHash;\\n\\n    // It is a reverse lookup of the token ID given the metadata hash\\n    mapping(string => uint256) internal _uriHashToId;\\n\\n    // Hash to the contract metadata\\n    string private _contractURIHash;\\n\\n    /* Public Functions */\\n\\n    /**\\n     * @notice checks if an interface is supported by ITellerNFT or AccessControlUpgradeable\\n     * @param interfaceId the identifier of the interface\\n     * @return bool stating whether or not our interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(abi.encodePacked(super.uri(tokenId), _idToUriHash[tokenId]));\\n    }\\n\\n    /* External Functions */\\n\\n    /**\\n     * @notice The contract metadata URI.\\n     * @return the contract URI hash\\n     */\\n    function contractURI() external view returns (string memory) {\\n        // URI returned from parent just returns base URI\\n        return string(abi.encodePacked(super.uri(0), _contractURIHash));\\n    }\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param tokenId ID of the token to get Tier info.\\n     * @return tierId_ the index of the tier the tokenId belongs to\\n     * @return tierTokenId_ the tokenId in tier\\n     */\\n    function getTokenTierId(uint256 tokenId)\\n        external\\n        view\\n        returns (uint128 tierId_, uint128 tierTokenId_)\\n    {\\n        (tierId_, tierTokenId_) = _splitTokenId(tokenId);\\n    }\\n\\n    /**\\n     * @notice It returns Base Loan Size for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenBaseLoanSize(uint256 tokenId) public view returns (uint256) {\\n        (uint128 tierId, ) = _splitTokenId(tokenId);\\n        return tiers[tierId].baseLoanSize;\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Asset for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionAsset(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        (uint128 tierId, ) = _splitTokenId(tokenId);\\n        return tiers[tierId].contributionAsset;\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Size for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionSize(uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (uint128 tierId, ) = _splitTokenId(tokenId);\\n        return tiers[tierId].contributionSize;\\n    }\\n\\n    /**\\n     * @notice It returns Contribution Multiplier for a token ID.\\n     * @param tokenId ID of the token to get info.\\n     */\\n    function tokenContributionMultiplier(uint256 tokenId)\\n        public\\n        view\\n        returns (uint16)\\n    {\\n        (uint128 tierId, ) = _splitTokenId(tokenId);\\n        return tiers[tierId].contributionMultiplier;\\n    }\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     * @return owned_ the array of tokenIDs owned by the address\\n     */\\n    function getOwnedTokens(address owner)\\n        external\\n        view\\n        returns (uint256[] memory owned_)\\n    {\\n        EnumerableSet.UintSet storage set = _ownedTokenIds[owner];\\n        owned_ = new uint256[](set.length());\\n        for (uint256 i; i < owned_.length; i++) {\\n            owned_[i] = set.at(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates new Tiers to be minted with the given information.\\n     * @dev It auto increments the index of the next tier to add.\\n     * @param newTiers Information about the new tiers to add.\\n     * @param tierHashes Metadata hashes belonging to the tiers.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {ADMIN} role\\n     */\\n    function createTiers(\\n        Tier[] calldata newTiers,\\n        string[][] calldata tierHashes\\n    ) external onlyRole(ADMIN) {\\n        require(\\n            newTiers.length == tierHashes.length,\\n            \\\"Teller: array length mismatch\\\"\\n        );\\n\\n        for (uint256 i; i < newTiers.length; i++) {\\n            _createTier(newTiers[i], tierHashes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice creates the tier along with the tier hashes, then saves the tokenId\\n     * information in id -> hash and hash -> id mappings\\n     * @param newTier the Tier struct containing all the tier information\\n     * @param tierHashes the tier hashes to add to the tier\\n     */\\n    function _createTier(Tier calldata newTier, string[] calldata tierHashes)\\n        internal\\n    {\\n        // Increment tier counter to use\\n        tierCount++;\\n        Tier storage tier = tiers[tierCount];\\n        tier.baseLoanSize = newTier.baseLoanSize;\\n        tier.contributionAsset = newTier.contributionAsset;\\n        tier.contributionSize = newTier.contributionSize;\\n        tier.contributionMultiplier = newTier.contributionMultiplier;\\n\\n        // Store how many tokens are on the tier\\n        tierTokenCount[tierCount] = tierHashes.length;\\n        // Set the token URI hash\\n        for (uint128 i; i < tierHashes.length; i++) {\\n            uint256 tokenId = _mergeTokenId(tierCount, i);\\n            _idToUriHash[tokenId] = tierHashes[i];\\n            _uriHashToId[tierHashes[i]] = tokenId;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     *\\n     * Requirements:\\n     *\\n     * - `newURI` must be prepended with a forward slash (/)\\n     */\\n    function setURI(string memory newURI) external onlyRole(ADMIN) {\\n        _setURI(newURI);\\n    }\\n\\n    /**\\n     * @notice Sets the contract level metadata URI hash.\\n     * @param contractURIHash The hash to the initial contract level metadata.\\n     */\\n    function setContractURIHash(string memory contractURIHash)\\n        public\\n        onlyRole(ADMIN)\\n    {\\n        _contractURIHash = contractURIHash;\\n    }\\n\\n    /**\\n     * @notice Initializes the TellerNFT.\\n     * @param data Bytes to init the token with.\\n     */\\n    function initialize(bytes calldata data) public virtual initializer {\\n        // Set the initial URI\\n        __ERC1155_init(\\\"https://gateway.pinata.cloud/ipfs/\\\");\\n        __AccessControl_init();\\n\\n        // Set admin role for admins\\n        _setRoleAdmin(ADMIN, ADMIN);\\n        // Set the initial admin\\n        _setupRole(ADMIN, _msgSender());\\n\\n        // Set initial contract URI hash\\n        setContractURIHash(\\\"QmWAfQFFwptzRUCdF2cBFJhcB2gfHJMd7TQt64dZUysk3R\\\");\\n\\n        __TellerNFT_V2_init_unchained(data);\\n    }\\n\\n    function __TellerNFT_V2_init_unchained(bytes calldata data)\\n        internal\\n        virtual\\n        initializer\\n    {}\\n\\n    /* Internal Functions */\\n\\n    /**\\n     * @notice it removes a token ID from the ownedTokenIds mapping if the balance of\\n     * the user's tokenId is 0\\n     * @param account the address to add the token id to\\n     * @param id the token ID\\n     */\\n    function _removeOwnedTokenCheck(address account, uint256 id) private {\\n        if (balanceOf(account, id) == 0) {\\n            _ownedTokenIds[account].remove(id);\\n        }\\n    }\\n\\n    /**\\n     * @notice it adds a token id to the ownedTokenIds mapping\\n     * @param account the address to the add the token ID to\\n     * @param id the token ID\\n     */\\n    function _addOwnedToken(address account, uint256 id) private {\\n        _ownedTokenIds[account].add(id);\\n    }\\n\\n    /**\\n     * @dev Runs super function and then increases total supply.\\n     *\\n     * See {ERC1155Upgradeable._mint}.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal override {\\n        super._mint(account, id, amount, data);\\n\\n        // add the id to the owned token ids of the user\\n        _addOwnedToken(account, id);\\n\\n        totalSupply += amount;\\n    }\\n\\n    /**\\n     * @dev Runs super function and then increases total supply.\\n     *\\n     * See {ERC1155Upgradeable._mintBatch}.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override {\\n        super._mintBatch(to, ids, amounts, data);\\n\\n        for (uint256 i; i < amounts.length; i++) {\\n            totalSupply += amounts[i];\\n            _addOwnedToken(to, ids[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Runs super function and then decreases total supply.\\n     *\\n     * See {ERC1155Upgradeable._burn}.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal override {\\n        super._burn(account, id, amount);\\n        _removeOwnedTokenCheck(account, id);\\n        totalSupply -= amount;\\n    }\\n\\n    /**\\n     * @dev Runs super function and then decreases total supply.\\n     *\\n     * See {ERC1155Upgradeable._burnBatch}.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal override {\\n        super._burnBatch(account, ids, amounts);\\n\\n        for (uint256 i; i < amounts.length; i++) {\\n            totalSupply -= amounts[i];\\n            _removeOwnedTokenCheck(account, ids[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * See {ERC1155Upgradeable._safeTransferFrom}.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal override {\\n        super._safeTransferFrom(from, to, id, amount, data);\\n        _removeOwnedTokenCheck(from, id);\\n        _addOwnedToken(to, id);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *  See {ERC1155Upgradeable._safeBatchTransferFrom}\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override {\\n        super._safeBatchTransferFrom(from, to, ids, amounts, data);\\n        for (uint256 i; i < ids.length; i++) {\\n            _removeOwnedTokenCheck(from, ids[i]);\\n            _addOwnedToken(to, ids[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a token ID exists. To exists the ID must have a URI hash associated.\\n     * @param tokenId ID of the token to check.\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return bytes(_idToUriHash[tokenId]).length > 0;\\n    }\\n\\n    /**\\n     * @dev Creates a V2 token ID from a tier ID and tier token ID.\\n     * @param tierId Index of the tier to use.\\n     * @param tierTokenId ID of the token within the given tier.\\n     * @return tokenId_ V2 NFT token ID.\\n     */\\n    function _mergeTokenId(uint128 tierId, uint128 tierTokenId)\\n        internal\\n        pure\\n        returns (uint256 tokenId_)\\n    {\\n        tokenId_ = tierId * ID_PADDING;\\n        tokenId_ += tierTokenId;\\n    }\\n\\n    /**\\n     * @dev Creates a V2 token ID from a tier ID and tier token ID.\\n     * @param tokenId V2 NFT token ID.\\n     * @return tierId_ Index of the token tier.\\n     * @return tierTokenId_ ID of the token within the tier.\\n     */\\n    function _splitTokenId(uint256 tokenId)\\n        internal\\n        pure\\n        returns (uint128 tierId_, uint128 tierTokenId_)\\n    {\\n        tierId_ = SafeCast.toUint128(tokenId / ID_PADDING);\\n        tierTokenId_ = SafeCast.toUint128(tokenId % ID_PADDING);\\n    }\\n}\\n\",\"keccak256\":\"0xe2b7bab42c8e31291877203f57bbc4bc0c44320e63bcf7d10862653d6bd15c80\",\"license\":\"MIT\"},\"contracts/nft/mainnet/MainnetTellerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { TellerNFT_V2 } from \\\"../TellerNFT_V2.sol\\\";\\nimport { TellerNFTDictionary } from \\\"../TellerNFTDictionary.sol\\\";\\nimport {\\n    IERC721ReceiverUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\ncontract MainnetTellerNFT is IERC721ReceiverUpgradeable, TellerNFT_V2 {\\n    /* Constants */\\n\\n    address public constant V1 = 0x2ceB85a2402C94305526ab108e7597a102D6C175;\\n    TellerNFTDictionary public constant DICT =\\n        TellerNFTDictionary(0x72733102AB139FB0367cc29D492c955A7c736079);\\n    address public constant diamond =\\n        0xc14D994fe7C5858c93936cc3bD42bb9467d6fB2C;\\n\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\n    /* Initializers */\\n\\n    /**\\n     * @notice Initializes the TellerNFT.\\n     * @param data The addresses that should allowed to mint tokens.\\n     */\\n    function __TellerNFT_V2_init_unchained(bytes calldata data)\\n        internal\\n        override\\n        initializer\\n    {\\n        address[] memory minters = abi.decode(data, (address[]));\\n\\n        // Set admin role for minters\\n        _setRoleAdmin(MINTER, ADMIN);\\n        // Set the initial minters\\n        for (uint256 i; i < minters.length; i++) {\\n            _setupRole(MINTER, minters[i]);\\n        }\\n    }\\n\\n    /* External Functions */\\n\\n    /**\\n     * @notice It mints a new token for a Tier index.\\n     * @param tierIndex Tier to mint token on.\\n     * @param owner The owner of the new token.\\n     *\\n     * Requirements:\\n     *  - Caller must be an authorized minter\\n     */\\n    function mint(\\n        address owner,\\n        uint128 tierIndex,\\n        uint128 amount\\n    ) external onlyRole(MINTER) {\\n        // Get the token ID to mint for the user\\n        // On a fresh mint, the exact token ID minted is determined on tx execution\\n        //  with sudo randomness using the block number\\n        uint256 tokenId = _mergeTokenId(\\n            tierIndex,\\n            uint128(block.number % tierTokenCount[tierIndex])\\n        );\\n        _mint(owner, tokenId, uint256(amount), \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        // Check which 721 token we received\\n        // We only care about V1 so we can migrate it\\n        if (_msgSender() == V1) {\\n            uint256 newTokenId;\\n            // if the from address is the diamond address, we trust that we\\n            // can decode the data into the newly converted token id\\n            if (from == diamond) {\\n                newTokenId = abi.decode(data, (uint256));\\n            } else {\\n                newTokenId = convertV1TokenId(tokenId);\\n            }\\n            // Convert V1 token ID and mint 1 new V2 token to the diamond\\n            _mint(from, newTokenId, 1, \\\"\\\");\\n        }\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n\\n    /* Public Functions */\\n\\n    /**\\n     * @notice it performs a reverse look up on by finding our ID using the\\n     * tokenURI hash using the NFT dictionary. Required that the token id exists\\n     * @param _tokenId the tokenId to look up\\n     */\\n    function convertV1TokenId(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256 tokenId_)\\n    {\\n        tokenId_ = _uriHashToId[DICT.tokenURIHash(_tokenId)];\\n        require(_exists(tokenId_), \\\"TellerNFT: invalid token ID\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe21dc8bd23a4a730d5123babd76522f29d8731efc2d724800bb1c20e133aef72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135d6806100206000396000f3fe608060405234801561001057600080fd5b506004361061023b5760003560e01c806362a572331161013b578063c6ab0dc7116100b8578063e985e9c51161007c578063e985e9c514610612578063f0b7db4e1461064e578063f242432a14610669578063f40898ef1461067c578063fe6d81241461068f57600080fd5b8063c6ab0dc7146105b1578063ccca55f6146105d1578063d547741f146105e4578063d9d61655146105f7578063e8a3d4851461060a57600080fd5b806396b55f7d116100ff57806396b55f7d146105455780639762287014610570578063a217fddf14610583578063a22cb4651461058b578063baedc1c41461059e57600080fd5b806362a57233146104a357806363905160146104c95780636ca6b9a7146104dc57806391d148541461050f57806395d89b411461052257600080fd5b8063248a9ca3116101c957806336568abe1161018d57806336568abe1461040f5780633ee569bf146104225780633f5976d514610455578063439fab91146104705780634e1273f41461048357600080fd5b8063248a9ca31461039e57806324db57f8146103c15780632a0acc6a146103d45780632eb2c2d6146103e95780632f2ff15d146103fc57600080fd5b8063039af9eb11610210578063039af9eb146102b157806306fdde03146103205780630e89341c14610356578063150b7a021461036957806318160ddd1461039557600080fd5b806284c79514610240578062fdd58e1461026657806301ffc9a71461027957806302fe53051461029c575b600080fd5b61025361024e366004612c5b565b6106a4565b6040519081526020015b60405180910390f35b610253610274366004612ada565b6106d3565b61028c610287366004612c95565b61076f565b604051901515815260200161025d565b6102af6102aa366004612d0c565b61077a565b005b6102f46102bf366004612c5b565b60ca60205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169161ffff1684565b604080519485526001600160a01b0390931660208501529183015261ffff16606082015260800161025d565b6103496040518060400160405280600a81526020016915195b1b195c8813919560b21b81525081565b60405161025d91906130a4565b610349610364366004612c5b565b6107a0565b61037c610377366004612990565b6107e1565b6040516001600160e01b0319909116815260200161025d565b61025360c95481565b6102536103ac366004612c5b565b60009081526097602052604090206001015490565b6102536103cf366004612c5b565b610875565b61025360008051602061358183398151915281565b6102af6103f73660046128eb565b6108a1565b6102af61040a366004612c73565b610938565b6102af61041d366004612c73565b610963565b61043d732ceb85a2402c94305526ab108e7597a102d6c17581565b6040516001600160a01b03909116815260200161025d565b61043d7372733102ab139fb0367cc29d492c955a7c73607981565b6102af61047e366004612ccd565b6109dd565b610496610491366004612b3d565b610ace565b60405161025d9190613063565b6104b66104b1366004612c5b565b610c2f565b60405161ffff909116815260200161025d565b6102536104d7366004612c5b565b610c62565b6104ef6104ea366004612c5b565b610d67565b604080516001600160801b0393841681529290911660208301520161025d565b61028c61051d366004612c73565b610d7d565b610349604051806040016040528060048152602001631513919560e21b81525081565b60cb54610558906001600160801b031681565b6040516001600160801b03909116815260200161025d565b6102af61057e366004612a98565b610da8565b610253600081565b6102af610599366004612a5e565b610e15565b6102af6105ac366004612d0c565b610eec565b6102536105bf366004612dce565b60cc6020526000908152604090205481565b6102af6105df366004612b9d565b610f18565b6102af6105f2366004612c73565b611005565b61049661060536600461289f565b61102b565b6103496110fa565b61028c6106203660046128b9565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61043d73c14d994fe7c5858c93936cc3bd42bb9467d6fb2c81565b6102af6106773660046129fc565b61112d565b61043d61068a366004612c5b565b6111b4565b61025360008051602061351183398151915281565b6000806106b0836111ec565b506001600160801b0316600090815260ca60205260409020600201549392505050565b60006001600160a01b0383166107445760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006107698261121b565b6000805160206135818339815191526107938133611240565b61079c826112a4565b5050565b60606107ab826112b7565b600083815260ce602090815260409182902091516107cb93929101612e9c565b6040516020818303038152906040529050919050565b600033732ceb85a2402c94305526ab108e7597a102d6c17514156108635760006001600160a01b03861673c14d994fe7c5858c93936cc3bd42bb9467d6fb2c14156108395761083283850185612c5b565b9050610845565b61084285610c62565b90505b610861868260016040518060200160405280600081525061134b565b505b50630a85bd0160e11b95945050505050565b600080610881836111ec565b506001600160801b0316600090815260ca60205260409020549392505050565b6001600160a01b0385163314806108bd57506108bd8533610620565b6109245760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161073b565b610931858585858561137e565b5050505050565b6000828152609760205260409020600101546109548133611240565b61095e838361140b565b505050565b6001600160a01b03811633146109d35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161073b565b61079c8282611491565b600054610100900460ff16806109f6575060005460ff16155b610a125760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff16158015610a34576000805461ffff19166101011790555b610a5560405180606001604052806022815260200161355f602291396114f8565b610a5d61157d565b610a7560008051602061358183398151915280611601565b610a8d60008051602061358183398151915233611655565b610aae6040518060600160405280602e8152602001613531602e9139610eec565b610ab8838361165f565b801561095e576000805461ff0019169055505050565b60608151835114610b335760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161073b565b600083516001600160401b03811115610b5c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b85578160200160208202803683370190505b50905060005b8451811015610c2757610bec858281518110610bb757634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610bdf57634e487b7160e01b600052603260045260246000fd5b60200260200101516106d3565b828281518110610c0c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610c20816133e8565b9050610b8b565b509392505050565b600080610c3b836111ec565b506001600160801b0316600090815260ca602052604090206003015461ffff169392505050565b60405163d300133960e01b81526004810182905260009060cf907372733102ab139fb0367cc29d492c955a7c7360799063d30013399060240160006040518083038186803b158015610cb357600080fd5b505afa158015610cc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cef9190810190612d51565b604051610cfc9190612e80565b9081526020016040518091039020549050610d1681611761565b610d625760405162461bcd60e51b815260206004820152601b60248201527f54656c6c65724e46543a20696e76616c696420746f6b656e2049440000000000604482015260640161073b565b919050565b600080610d73836111ec565b9094909350915050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020613511833981519152610dc18133611240565b6001600160801b038316600090815260cc6020526040812054610def908590610dea9043613403565b611787565b90506109318582856001600160801b03166040518060200160405280600081525061134b565b336001600160a01b0383161415610e805760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161073b565b3360008181526066602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600080516020613581833981519152610f058133611240565b815161095e9060d09060208501906125db565b600080516020613581833981519152610f318133611240565b838214610f805760405162461bcd60e51b815260206004820152601d60248201527f54656c6c65723a206172726179206c656e677468206d69736d61746368000000604482015260640161073b565b60005b84811015610ffd57610feb868683818110610fae57634e487b7160e01b600052603260045260246000fd5b905060800201858584818110610fd457634e487b7160e01b600052603260045260246000fd5b9050602002810190610fe691906131dc565b6117ba565b80610ff5816133e8565b915050610f83565b505050505050565b6000828152609760205260409020600101546110218133611240565b61095e8383611491565b6001600160a01b038116600090815260cd6020526040902060609061104f8161197f565b6001600160401b0381111561107457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561109d578160200160208202803683370190505b50915060005b82518110156110f3576110b68282611989565b8382815181106110d657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110eb816133e8565b9150506110a3565b5050919050565b606061110660006112b7565b60d0604051602001611119929190612e9c565b604051602081830303815290604052905090565b6001600160a01b03851633148061114957506111498533610620565b6111a75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161073b565b6109318585858585611995565b6000806111c0836111ec565b506001600160801b0316600090815260ca60205260409020600101546001600160a01b03169392505050565b6000806112036111fe612710856132c9565b6119b6565b91506112146111fe61271085613403565b9050915091565b60006001600160e01b03198216637965db0b60e01b1480610769575061076982611a23565b61124a8282610d7d565b61079c57611262816001600160a01b03166014611a73565b61126d836020611a73565b60405160200161127e929190612f4b565b60408051601f198184030181529082905262461bcd60e51b825261073b916004016130a4565b805161079c9060679060208401906125db565b6060606780546112c69061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546112f29061335a565b801561133f5780601f106113145761010080835404028352916020019161133f565b820191906000526020600020905b81548152906001019060200180831161132257829003601f168201915b50505050509050919050565b61135784848484611c54565b6113618484611d60565b8160c9600082825461137391906132b1565b909155505050505050565b61138b8585858585611d82565b60005b8351811015610ffd576113c8868583815181106113bb57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f76565b6113f9858583815181106113ec57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d60565b80611403816133e8565b91505061138e565b6114158282610d7d565b61079c5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561144d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61149b8282610d7d565b1561079c5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680611511575060005460ff16155b61152d5760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff1615801561154f576000805461ffff19166101011790555b611557611fa6565b61155f611fa6565b61156882612010565b801561079c576000805461ff00191690555050565b600054610100900460ff1680611596575060005460ff16155b6115b25760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff161580156115d4576000805461ffff19166101011790555b6115dc611fa6565b6115e4611fa6565b6115ec611fa6565b80156115fe576000805461ff00191690555b50565b600082815260976020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526097602052604090912060010155565b61079c828261140b565b600054610100900460ff1680611678575060005460ff16155b6116945760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff161580156116b6576000805461ffff19166101011790555b60006116c483850185612b03565b90506116ec600080516020613511833981519152600080516020613581833981519152611601565b60005b81518110156117495761173760008051602061351183398151915283838151811061172a57634e487b7160e01b600052603260045260246000fd5b6020026020010151611655565b80611741816133e8565b9150506116ef565b5050801561095e576000805461ff0019169055505050565b600081815260ce60205260408120805482919061177d9061335a565b9050119050919050565b600061179e6127106001600160801b0385166132dd565b90506117b36001600160801b038316826132b1565b9392505050565b60cb80546001600160801b03169060006117d3836133c1565b82546101009290920a6001600160801b0381810219909316918316021790915560cb5416600090815260ca602090815260409182902086358155925061181d91860190860161289f565b6001820180546001600160a01b0319166001600160a01b0392909216919091179055604084013560028201556118596080850160608601612de8565b60038201805461ffff191661ffff9290921691909117905560cb546001600160801b0316600090815260cc602052604081208390555b6001600160801b0381168311156109315760cb546000906118b9906001600160801b031683611787565b90508484836001600160801b03168181106118e457634e487b7160e01b600052603260045260246000fd5b90506020028101906118f69190613223565b600083815260ce6020526040902061190f92909161265b565b508060cf8686856001600160801b031681811061193c57634e487b7160e01b600052603260045260246000fd5b905060200281019061194e9190613223565b60405161195c929190612e70565b908152604051908190036020019020555080611977816133c1565b91505061188f565b6000610769825490565b60006117b38383612070565b6119a285858585856120a8565b6119ac8584611f76565b6109318484611d60565b60006001600160801b03821115611a1f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161073b565b5090565b60006001600160e01b03198216636cdb3d1360e11b1480611a5457506001600160e01b031982166303a24d0760e21b145b8061076957506301ffc9a760e01b6001600160e01b0319831614610769565b60606000611a828360026132dd565b611a8d9060026132b1565b6001600160401b03811115611ab257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611adc576020820181803683370190505b509050600360fc1b81600081518110611b0557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b4257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611b668460026132dd565b611b719060016132b1565b90505b6001811115611c05576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bb357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611bd757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611bfe81613343565b9050611b74565b5083156117b35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161073b565b6001600160a01b038416611cb45760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161073b565b33611cce81600087611cc5886121c9565b610931886121c9565b60008481526065602090815260408083206001600160a01b038916845290915281208054859290611d009084906132b1565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461093181600087878787612222565b6001600160a01b038216600090815260cd6020526040902061095e908261238d565b8151835114611de45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161073b565b6001600160a01b038416611e0a5760405162461bcd60e51b815260040161073b906130ff565b3360005b8451811015611f10576000858281518110611e3957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611e6557634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015611eb65760405162461bcd60e51b815260040161073b90613192565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ef59084906132b1565b9250508190555050505080611f09906133e8565b9050611e0e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f60929190613076565b60405180910390a4610ffd818787878787612399565b611f8082826106d3565b61079c576001600160a01b038216600090815260cd6020526040902061095e9082612463565b600054610100900460ff1680611fbf575060005460ff16155b611fdb5760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff161580156115ec576000805461ffff191661010117905580156115fe576000805461ff001916905550565b600054610100900460ff1680612029575060005460ff16155b6120455760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff16158015612067576000805461ffff19166101011790555b611568826112a4565b600082600001828154811061209557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6001600160a01b0384166120ce5760405162461bcd60e51b815260040161073b906130ff565b336120de818787611cc5886121c9565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156121215760405162461bcd60e51b815260040161073b90613192565b60008581526065602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906121609084906132b1565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121c0828888888888612222565b50505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061221157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610ffd5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612266908990899088908890889060040161301e565b602060405180830381600087803b15801561228057600080fd5b505af19250505080156122b0575060408051601f3d908101601f191682019092526122ad91810190612cb1565b60015b61235d576122bc613459565b806308c379a014156122f657506122d1613471565b806122dc57506122f8565b8060405162461bcd60e51b815260040161073b91906130a4565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161073b565b6001600160e01b0319811663f23a6e6160e01b146121c05760405162461bcd60e51b815260040161073b906130b7565b60006117b3838361246f565b6001600160a01b0384163b15610ffd5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906123dd9089908990889088908890600401612fc0565b602060405180830381600087803b1580156123f757600080fd5b505af1925050508015612427575060408051601f3d908101601f1916820190925261242491810190612cb1565b60015b612433576122bc613459565b6001600160e01b0319811663bc197c8160e01b146121c05760405162461bcd60e51b815260040161073b906130b7565b60006117b383836124be565b60008181526001830160205260408120546124b657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610769565b506000610769565b600081815260018301602052604081205480156125d15760006124e26001836132fc565b85549091506000906124f6906001906132fc565b905081811461257757600086600001828154811061252457634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061255557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061259657634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610769565b6000915050610769565b8280546125e79061335a565b90600052602060002090601f016020900481019282612609576000855561264f565b82601f1061262257805160ff191683800117855561264f565b8280016001018555821561264f579182015b8281111561264f578251825591602001919060010190612634565b50611a1f9291506126cf565b8280546126679061335a565b90600052602060002090601f016020900481019282612689576000855561264f565b82601f106126a25782800160ff1982351617855561264f565b8280016001018555821561264f579182015b8281111561264f5782358255916020019190600101906126b4565b5b80821115611a1f57600081556001016126d0565b60006126ef8361328a565b6040516126fc8282613395565b80925084815285858501111561271157600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b0381168114610d6257600080fd5b600082601f830112612751578081fd5b8135602061275e82613267565b60405161276b8282613395565b8381528281019150858301600585901b8701840188101561278a578586fd5b855b858110156127af5761279d8261272a565b8452928401929084019060010161278c565b5090979650505050505050565b600082601f8301126127cc578081fd5b813560206127d982613267565b6040516127e68282613395565b8381528281019150858301600585901b87018401881015612805578586fd5b855b858110156127af57813584529284019290840190600101612807565b60008083601f840112612834578182fd5b5081356001600160401b0381111561284a578182fd5b60208301915083602082850101111561286257600080fd5b9250929050565b600082601f830112612879578081fd5b6117b3838335602085016126e4565b80356001600160801b0381168114610d6257600080fd5b6000602082840312156128b0578081fd5b6117b38261272a565b600080604083850312156128cb578081fd5b6128d48361272a565b91506128e26020840161272a565b90509250929050565b600080600080600060a08688031215612902578081fd5b61290b8661272a565b94506129196020870161272a565b935060408601356001600160401b0380821115612934578283fd5b61294089838a016127bc565b94506060880135915080821115612955578283fd5b61296189838a016127bc565b93506080880135915080821115612976578283fd5b5061298388828901612869565b9150509295509295909350565b6000806000806000608086880312156129a7578081fd5b6129b08661272a565b94506129be6020870161272a565b93506040860135925060608601356001600160401b038111156129df578182fd5b6129eb88828901612823565b969995985093965092949392505050565b600080600080600060a08688031215612a13578283fd5b612a1c8661272a565b9450612a2a6020870161272a565b9350604086013592506060860135915060808601356001600160401b03811115612a52578182fd5b61298388828901612869565b60008060408385031215612a70578182fd5b612a798361272a565b915060208301358015158114612a8d578182fd5b809150509250929050565b600080600060608486031215612aac578081fd5b612ab58461272a565b9250612ac360208501612888565b9150612ad160408501612888565b90509250925092565b60008060408385031215612aec578182fd5b612af58361272a565b946020939093013593505050565b600060208284031215612b14578081fd5b81356001600160401b03811115612b29578182fd5b612b3584828501612741565b949350505050565b60008060408385031215612b4f578182fd5b82356001600160401b0380821115612b65578384fd5b612b7186838701612741565b93506020850135915080821115612b86578283fd5b50612b93858286016127bc565b9150509250929050565b60008060008060408587031215612bb2578182fd5b84356001600160401b0380821115612bc8578384fd5b818701915087601f830112612bdb578384fd5b813581811115612be9578485fd5b8860208260071b8501011115612bfd578485fd5b602092830196509450908601359080821115612c17578384fd5b818701915087601f830112612c2a578384fd5b813581811115612c38578485fd5b8860208260051b8501011115612c4c578485fd5b95989497505060200194505050565b600060208284031215612c6c578081fd5b5035919050565b60008060408385031215612c85578182fd5b823591506128e26020840161272a565b600060208284031215612ca6578081fd5b81356117b3816134fa565b600060208284031215612cc2578081fd5b81516117b3816134fa565b60008060208385031215612cdf578182fd5b82356001600160401b03811115612cf4578283fd5b612d0085828601612823565b90969095509350505050565b600060208284031215612d1d578081fd5b81356001600160401b03811115612d32578182fd5b8201601f81018413612d42578182fd5b612b35848235602084016126e4565b600060208284031215612d62578081fd5b81516001600160401b03811115612d77578182fd5b8201601f81018413612d87578182fd5b8051612d928161328a565b604051612d9f8282613395565b828152866020848601011115612db3578485fd5b612dc4836020830160208701613313565b9695505050505050565b600060208284031215612ddf578081fd5b6117b382612888565b600060208284031215612df9578081fd5b813561ffff811681146117b3578182fd5b6000815180845260208085019450808401835b83811015612e3957815187529582019590820190600101612e1d565b509495945050505050565b60008151808452612e5c816020860160208601613313565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251612e92818460208701613313565b9190910192915050565b600083516020612eaf8285838901613313565b8454918401918390600181811c9080831680612ecc57607f831692505b858310811415612eea57634e487b7160e01b88526022600452602488fd5b808015612efe5760018114612f0f57612f3b565b60ff19851688528388019550612f3b565b60008b815260209020895b85811015612f335781548a820152908401908801612f1a565b505083880195505b50939a9950505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f83816017850160208801613313565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fb4816028840160208801613313565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612fec90830186612e0a565b8281036060840152612ffe8186612e0a565b905082810360808401526130128185612e44565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061305890830184612e44565b979650505050505050565b6020815260006117b36020830184612e0a565b6040815260006130896040830185612e0a565b828103602084015261309b8185612e0a565b95945050505050565b6020815260006117b36020830184612e44565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6000808335601e198436030181126131f2578283fd5b8301803591506001600160401b0382111561320b578283fd5b6020019150600581901b360382131561286257600080fd5b6000808335601e19843603018112613239578283fd5b8301803591506001600160401b03821115613252578283fd5b60200191503681900382131561286257600080fd5b60006001600160401b0382111561328057613280613443565b5060051b60200190565b60006001600160401b038211156132a3576132a3613443565b50601f01601f191660200190565b600082198211156132c4576132c4613417565b500190565b6000826132d8576132d861342d565b500490565b60008160001904831182151516156132f7576132f7613417565b500290565b60008282101561330e5761330e613417565b500390565b60005b8381101561332e578181015183820152602001613316565b8381111561333d576000848401525b50505050565b60008161335257613352613417565b506000190190565b600181811c9082168061336e57607f821691505b6020821081141561338f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b03811182821017156133ba576133ba613443565b6040525050565b60006001600160801b03808316818114156133de576133de613417565b6001019392505050565b60006000198214156133fc576133fc613417565b5060010190565b6000826134125761341261342d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561346e57600481823e5160e01c5b90565b600060443d101561347f5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156134ae57505050505090565b82850191508151818111156134c65750505050505090565b843d87010160208285010111156134e05750505050505090565b6134ef60208286010187613395565b509095945050505050565b6001600160e01b0319811681146115fe57600080fdfef0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9516d5741665146467770747a5255436446326342464a686342326766484a4d64375451743634645a5579736b335268747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42a2646970667358221220057474e67444bd9b2f5d44a42edf804620f3893995b4181538f575dd3ec3d67e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023b5760003560e01c806362a572331161013b578063c6ab0dc7116100b8578063e985e9c51161007c578063e985e9c514610612578063f0b7db4e1461064e578063f242432a14610669578063f40898ef1461067c578063fe6d81241461068f57600080fd5b8063c6ab0dc7146105b1578063ccca55f6146105d1578063d547741f146105e4578063d9d61655146105f7578063e8a3d4851461060a57600080fd5b806396b55f7d116100ff57806396b55f7d146105455780639762287014610570578063a217fddf14610583578063a22cb4651461058b578063baedc1c41461059e57600080fd5b806362a57233146104a357806363905160146104c95780636ca6b9a7146104dc57806391d148541461050f57806395d89b411461052257600080fd5b8063248a9ca3116101c957806336568abe1161018d57806336568abe1461040f5780633ee569bf146104225780633f5976d514610455578063439fab91146104705780634e1273f41461048357600080fd5b8063248a9ca31461039e57806324db57f8146103c15780632a0acc6a146103d45780632eb2c2d6146103e95780632f2ff15d146103fc57600080fd5b8063039af9eb11610210578063039af9eb146102b157806306fdde03146103205780630e89341c14610356578063150b7a021461036957806318160ddd1461039557600080fd5b806284c79514610240578062fdd58e1461026657806301ffc9a71461027957806302fe53051461029c575b600080fd5b61025361024e366004612c5b565b6106a4565b6040519081526020015b60405180910390f35b610253610274366004612ada565b6106d3565b61028c610287366004612c95565b61076f565b604051901515815260200161025d565b6102af6102aa366004612d0c565b61077a565b005b6102f46102bf366004612c5b565b60ca60205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169161ffff1684565b604080519485526001600160a01b0390931660208501529183015261ffff16606082015260800161025d565b6103496040518060400160405280600a81526020016915195b1b195c8813919560b21b81525081565b60405161025d91906130a4565b610349610364366004612c5b565b6107a0565b61037c610377366004612990565b6107e1565b6040516001600160e01b0319909116815260200161025d565b61025360c95481565b6102536103ac366004612c5b565b60009081526097602052604090206001015490565b6102536103cf366004612c5b565b610875565b61025360008051602061358183398151915281565b6102af6103f73660046128eb565b6108a1565b6102af61040a366004612c73565b610938565b6102af61041d366004612c73565b610963565b61043d732ceb85a2402c94305526ab108e7597a102d6c17581565b6040516001600160a01b03909116815260200161025d565b61043d7372733102ab139fb0367cc29d492c955a7c73607981565b6102af61047e366004612ccd565b6109dd565b610496610491366004612b3d565b610ace565b60405161025d9190613063565b6104b66104b1366004612c5b565b610c2f565b60405161ffff909116815260200161025d565b6102536104d7366004612c5b565b610c62565b6104ef6104ea366004612c5b565b610d67565b604080516001600160801b0393841681529290911660208301520161025d565b61028c61051d366004612c73565b610d7d565b610349604051806040016040528060048152602001631513919560e21b81525081565b60cb54610558906001600160801b031681565b6040516001600160801b03909116815260200161025d565b6102af61057e366004612a98565b610da8565b610253600081565b6102af610599366004612a5e565b610e15565b6102af6105ac366004612d0c565b610eec565b6102536105bf366004612dce565b60cc6020526000908152604090205481565b6102af6105df366004612b9d565b610f18565b6102af6105f2366004612c73565b611005565b61049661060536600461289f565b61102b565b6103496110fa565b61028c6106203660046128b9565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61043d73c14d994fe7c5858c93936cc3bd42bb9467d6fb2c81565b6102af6106773660046129fc565b61112d565b61043d61068a366004612c5b565b6111b4565b61025360008051602061351183398151915281565b6000806106b0836111ec565b506001600160801b0316600090815260ca60205260409020600201549392505050565b60006001600160a01b0383166107445760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006107698261121b565b6000805160206135818339815191526107938133611240565b61079c826112a4565b5050565b60606107ab826112b7565b600083815260ce602090815260409182902091516107cb93929101612e9c565b6040516020818303038152906040529050919050565b600033732ceb85a2402c94305526ab108e7597a102d6c17514156108635760006001600160a01b03861673c14d994fe7c5858c93936cc3bd42bb9467d6fb2c14156108395761083283850185612c5b565b9050610845565b61084285610c62565b90505b610861868260016040518060200160405280600081525061134b565b505b50630a85bd0160e11b95945050505050565b600080610881836111ec565b506001600160801b0316600090815260ca60205260409020549392505050565b6001600160a01b0385163314806108bd57506108bd8533610620565b6109245760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161073b565b610931858585858561137e565b5050505050565b6000828152609760205260409020600101546109548133611240565b61095e838361140b565b505050565b6001600160a01b03811633146109d35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161073b565b61079c8282611491565b600054610100900460ff16806109f6575060005460ff16155b610a125760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff16158015610a34576000805461ffff19166101011790555b610a5560405180606001604052806022815260200161355f602291396114f8565b610a5d61157d565b610a7560008051602061358183398151915280611601565b610a8d60008051602061358183398151915233611655565b610aae6040518060600160405280602e8152602001613531602e9139610eec565b610ab8838361165f565b801561095e576000805461ff0019169055505050565b60608151835114610b335760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161073b565b600083516001600160401b03811115610b5c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b85578160200160208202803683370190505b50905060005b8451811015610c2757610bec858281518110610bb757634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610bdf57634e487b7160e01b600052603260045260246000fd5b60200260200101516106d3565b828281518110610c0c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610c20816133e8565b9050610b8b565b509392505050565b600080610c3b836111ec565b506001600160801b0316600090815260ca602052604090206003015461ffff169392505050565b60405163d300133960e01b81526004810182905260009060cf907372733102ab139fb0367cc29d492c955a7c7360799063d30013399060240160006040518083038186803b158015610cb357600080fd5b505afa158015610cc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cef9190810190612d51565b604051610cfc9190612e80565b9081526020016040518091039020549050610d1681611761565b610d625760405162461bcd60e51b815260206004820152601b60248201527f54656c6c65724e46543a20696e76616c696420746f6b656e2049440000000000604482015260640161073b565b919050565b600080610d73836111ec565b9094909350915050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020613511833981519152610dc18133611240565b6001600160801b038316600090815260cc6020526040812054610def908590610dea9043613403565b611787565b90506109318582856001600160801b03166040518060200160405280600081525061134b565b336001600160a01b0383161415610e805760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161073b565b3360008181526066602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600080516020613581833981519152610f058133611240565b815161095e9060d09060208501906125db565b600080516020613581833981519152610f318133611240565b838214610f805760405162461bcd60e51b815260206004820152601d60248201527f54656c6c65723a206172726179206c656e677468206d69736d61746368000000604482015260640161073b565b60005b84811015610ffd57610feb868683818110610fae57634e487b7160e01b600052603260045260246000fd5b905060800201858584818110610fd457634e487b7160e01b600052603260045260246000fd5b9050602002810190610fe691906131dc565b6117ba565b80610ff5816133e8565b915050610f83565b505050505050565b6000828152609760205260409020600101546110218133611240565b61095e8383611491565b6001600160a01b038116600090815260cd6020526040902060609061104f8161197f565b6001600160401b0381111561107457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561109d578160200160208202803683370190505b50915060005b82518110156110f3576110b68282611989565b8382815181106110d657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110eb816133e8565b9150506110a3565b5050919050565b606061110660006112b7565b60d0604051602001611119929190612e9c565b604051602081830303815290604052905090565b6001600160a01b03851633148061114957506111498533610620565b6111a75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161073b565b6109318585858585611995565b6000806111c0836111ec565b506001600160801b0316600090815260ca60205260409020600101546001600160a01b03169392505050565b6000806112036111fe612710856132c9565b6119b6565b91506112146111fe61271085613403565b9050915091565b60006001600160e01b03198216637965db0b60e01b1480610769575061076982611a23565b61124a8282610d7d565b61079c57611262816001600160a01b03166014611a73565b61126d836020611a73565b60405160200161127e929190612f4b565b60408051601f198184030181529082905262461bcd60e51b825261073b916004016130a4565b805161079c9060679060208401906125db565b6060606780546112c69061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546112f29061335a565b801561133f5780601f106113145761010080835404028352916020019161133f565b820191906000526020600020905b81548152906001019060200180831161132257829003601f168201915b50505050509050919050565b61135784848484611c54565b6113618484611d60565b8160c9600082825461137391906132b1565b909155505050505050565b61138b8585858585611d82565b60005b8351811015610ffd576113c8868583815181106113bb57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f76565b6113f9858583815181106113ec57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d60565b80611403816133e8565b91505061138e565b6114158282610d7d565b61079c5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561144d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61149b8282610d7d565b1561079c5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680611511575060005460ff16155b61152d5760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff1615801561154f576000805461ffff19166101011790555b611557611fa6565b61155f611fa6565b61156882612010565b801561079c576000805461ff00191690555050565b600054610100900460ff1680611596575060005460ff16155b6115b25760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff161580156115d4576000805461ffff19166101011790555b6115dc611fa6565b6115e4611fa6565b6115ec611fa6565b80156115fe576000805461ff00191690555b50565b600082815260976020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526097602052604090912060010155565b61079c828261140b565b600054610100900460ff1680611678575060005460ff16155b6116945760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff161580156116b6576000805461ffff19166101011790555b60006116c483850185612b03565b90506116ec600080516020613511833981519152600080516020613581833981519152611601565b60005b81518110156117495761173760008051602061351183398151915283838151811061172a57634e487b7160e01b600052603260045260246000fd5b6020026020010151611655565b80611741816133e8565b9150506116ef565b5050801561095e576000805461ff0019169055505050565b600081815260ce60205260408120805482919061177d9061335a565b9050119050919050565b600061179e6127106001600160801b0385166132dd565b90506117b36001600160801b038316826132b1565b9392505050565b60cb80546001600160801b03169060006117d3836133c1565b82546101009290920a6001600160801b0381810219909316918316021790915560cb5416600090815260ca602090815260409182902086358155925061181d91860190860161289f565b6001820180546001600160a01b0319166001600160a01b0392909216919091179055604084013560028201556118596080850160608601612de8565b60038201805461ffff191661ffff9290921691909117905560cb546001600160801b0316600090815260cc602052604081208390555b6001600160801b0381168311156109315760cb546000906118b9906001600160801b031683611787565b90508484836001600160801b03168181106118e457634e487b7160e01b600052603260045260246000fd5b90506020028101906118f69190613223565b600083815260ce6020526040902061190f92909161265b565b508060cf8686856001600160801b031681811061193c57634e487b7160e01b600052603260045260246000fd5b905060200281019061194e9190613223565b60405161195c929190612e70565b908152604051908190036020019020555080611977816133c1565b91505061188f565b6000610769825490565b60006117b38383612070565b6119a285858585856120a8565b6119ac8584611f76565b6109318484611d60565b60006001600160801b03821115611a1f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161073b565b5090565b60006001600160e01b03198216636cdb3d1360e11b1480611a5457506001600160e01b031982166303a24d0760e21b145b8061076957506301ffc9a760e01b6001600160e01b0319831614610769565b60606000611a828360026132dd565b611a8d9060026132b1565b6001600160401b03811115611ab257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611adc576020820181803683370190505b509050600360fc1b81600081518110611b0557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b4257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611b668460026132dd565b611b719060016132b1565b90505b6001811115611c05576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bb357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611bd757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611bfe81613343565b9050611b74565b5083156117b35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161073b565b6001600160a01b038416611cb45760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161073b565b33611cce81600087611cc5886121c9565b610931886121c9565b60008481526065602090815260408083206001600160a01b038916845290915281208054859290611d009084906132b1565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461093181600087878787612222565b6001600160a01b038216600090815260cd6020526040902061095e908261238d565b8151835114611de45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161073b565b6001600160a01b038416611e0a5760405162461bcd60e51b815260040161073b906130ff565b3360005b8451811015611f10576000858281518110611e3957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611e6557634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015611eb65760405162461bcd60e51b815260040161073b90613192565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ef59084906132b1565b9250508190555050505080611f09906133e8565b9050611e0e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f60929190613076565b60405180910390a4610ffd818787878787612399565b611f8082826106d3565b61079c576001600160a01b038216600090815260cd6020526040902061095e9082612463565b600054610100900460ff1680611fbf575060005460ff16155b611fdb5760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff161580156115ec576000805461ffff191661010117905580156115fe576000805461ff001916905550565b600054610100900460ff1680612029575060005460ff16155b6120455760405162461bcd60e51b815260040161073b90613144565b600054610100900460ff16158015612067576000805461ffff19166101011790555b611568826112a4565b600082600001828154811061209557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6001600160a01b0384166120ce5760405162461bcd60e51b815260040161073b906130ff565b336120de818787611cc5886121c9565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156121215760405162461bcd60e51b815260040161073b90613192565b60008581526065602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906121609084906132b1565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121c0828888888888612222565b50505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061221157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610ffd5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612266908990899088908890889060040161301e565b602060405180830381600087803b15801561228057600080fd5b505af19250505080156122b0575060408051601f3d908101601f191682019092526122ad91810190612cb1565b60015b61235d576122bc613459565b806308c379a014156122f657506122d1613471565b806122dc57506122f8565b8060405162461bcd60e51b815260040161073b91906130a4565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161073b565b6001600160e01b0319811663f23a6e6160e01b146121c05760405162461bcd60e51b815260040161073b906130b7565b60006117b3838361246f565b6001600160a01b0384163b15610ffd5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906123dd9089908990889088908890600401612fc0565b602060405180830381600087803b1580156123f757600080fd5b505af1925050508015612427575060408051601f3d908101601f1916820190925261242491810190612cb1565b60015b612433576122bc613459565b6001600160e01b0319811663bc197c8160e01b146121c05760405162461bcd60e51b815260040161073b906130b7565b60006117b383836124be565b60008181526001830160205260408120546124b657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610769565b506000610769565b600081815260018301602052604081205480156125d15760006124e26001836132fc565b85549091506000906124f6906001906132fc565b905081811461257757600086600001828154811061252457634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061255557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061259657634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610769565b6000915050610769565b8280546125e79061335a565b90600052602060002090601f016020900481019282612609576000855561264f565b82601f1061262257805160ff191683800117855561264f565b8280016001018555821561264f579182015b8281111561264f578251825591602001919060010190612634565b50611a1f9291506126cf565b8280546126679061335a565b90600052602060002090601f016020900481019282612689576000855561264f565b82601f106126a25782800160ff1982351617855561264f565b8280016001018555821561264f579182015b8281111561264f5782358255916020019190600101906126b4565b5b80821115611a1f57600081556001016126d0565b60006126ef8361328a565b6040516126fc8282613395565b80925084815285858501111561271157600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b0381168114610d6257600080fd5b600082601f830112612751578081fd5b8135602061275e82613267565b60405161276b8282613395565b8381528281019150858301600585901b8701840188101561278a578586fd5b855b858110156127af5761279d8261272a565b8452928401929084019060010161278c565b5090979650505050505050565b600082601f8301126127cc578081fd5b813560206127d982613267565b6040516127e68282613395565b8381528281019150858301600585901b87018401881015612805578586fd5b855b858110156127af57813584529284019290840190600101612807565b60008083601f840112612834578182fd5b5081356001600160401b0381111561284a578182fd5b60208301915083602082850101111561286257600080fd5b9250929050565b600082601f830112612879578081fd5b6117b3838335602085016126e4565b80356001600160801b0381168114610d6257600080fd5b6000602082840312156128b0578081fd5b6117b38261272a565b600080604083850312156128cb578081fd5b6128d48361272a565b91506128e26020840161272a565b90509250929050565b600080600080600060a08688031215612902578081fd5b61290b8661272a565b94506129196020870161272a565b935060408601356001600160401b0380821115612934578283fd5b61294089838a016127bc565b94506060880135915080821115612955578283fd5b61296189838a016127bc565b93506080880135915080821115612976578283fd5b5061298388828901612869565b9150509295509295909350565b6000806000806000608086880312156129a7578081fd5b6129b08661272a565b94506129be6020870161272a565b93506040860135925060608601356001600160401b038111156129df578182fd5b6129eb88828901612823565b969995985093965092949392505050565b600080600080600060a08688031215612a13578283fd5b612a1c8661272a565b9450612a2a6020870161272a565b9350604086013592506060860135915060808601356001600160401b03811115612a52578182fd5b61298388828901612869565b60008060408385031215612a70578182fd5b612a798361272a565b915060208301358015158114612a8d578182fd5b809150509250929050565b600080600060608486031215612aac578081fd5b612ab58461272a565b9250612ac360208501612888565b9150612ad160408501612888565b90509250925092565b60008060408385031215612aec578182fd5b612af58361272a565b946020939093013593505050565b600060208284031215612b14578081fd5b81356001600160401b03811115612b29578182fd5b612b3584828501612741565b949350505050565b60008060408385031215612b4f578182fd5b82356001600160401b0380821115612b65578384fd5b612b7186838701612741565b93506020850135915080821115612b86578283fd5b50612b93858286016127bc565b9150509250929050565b60008060008060408587031215612bb2578182fd5b84356001600160401b0380821115612bc8578384fd5b818701915087601f830112612bdb578384fd5b813581811115612be9578485fd5b8860208260071b8501011115612bfd578485fd5b602092830196509450908601359080821115612c17578384fd5b818701915087601f830112612c2a578384fd5b813581811115612c38578485fd5b8860208260051b8501011115612c4c578485fd5b95989497505060200194505050565b600060208284031215612c6c578081fd5b5035919050565b60008060408385031215612c85578182fd5b823591506128e26020840161272a565b600060208284031215612ca6578081fd5b81356117b3816134fa565b600060208284031215612cc2578081fd5b81516117b3816134fa565b60008060208385031215612cdf578182fd5b82356001600160401b03811115612cf4578283fd5b612d0085828601612823565b90969095509350505050565b600060208284031215612d1d578081fd5b81356001600160401b03811115612d32578182fd5b8201601f81018413612d42578182fd5b612b35848235602084016126e4565b600060208284031215612d62578081fd5b81516001600160401b03811115612d77578182fd5b8201601f81018413612d87578182fd5b8051612d928161328a565b604051612d9f8282613395565b828152866020848601011115612db3578485fd5b612dc4836020830160208701613313565b9695505050505050565b600060208284031215612ddf578081fd5b6117b382612888565b600060208284031215612df9578081fd5b813561ffff811681146117b3578182fd5b6000815180845260208085019450808401835b83811015612e3957815187529582019590820190600101612e1d565b509495945050505050565b60008151808452612e5c816020860160208601613313565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251612e92818460208701613313565b9190910192915050565b600083516020612eaf8285838901613313565b8454918401918390600181811c9080831680612ecc57607f831692505b858310811415612eea57634e487b7160e01b88526022600452602488fd5b808015612efe5760018114612f0f57612f3b565b60ff19851688528388019550612f3b565b60008b815260209020895b85811015612f335781548a820152908401908801612f1a565b505083880195505b50939a9950505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f83816017850160208801613313565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fb4816028840160208801613313565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612fec90830186612e0a565b8281036060840152612ffe8186612e0a565b905082810360808401526130128185612e44565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061305890830184612e44565b979650505050505050565b6020815260006117b36020830184612e0a565b6040815260006130896040830185612e0a565b828103602084015261309b8185612e0a565b95945050505050565b6020815260006117b36020830184612e44565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6000808335601e198436030181126131f2578283fd5b8301803591506001600160401b0382111561320b578283fd5b6020019150600581901b360382131561286257600080fd5b6000808335601e19843603018112613239578283fd5b8301803591506001600160401b03821115613252578283fd5b60200191503681900382131561286257600080fd5b60006001600160401b0382111561328057613280613443565b5060051b60200190565b60006001600160401b038211156132a3576132a3613443565b50601f01601f191660200190565b600082198211156132c4576132c4613417565b500190565b6000826132d8576132d861342d565b500490565b60008160001904831182151516156132f7576132f7613417565b500290565b60008282101561330e5761330e613417565b500390565b60005b8381101561332e578181015183820152602001613316565b8381111561333d576000848401525b50505050565b60008161335257613352613417565b506000190190565b600181811c9082168061336e57607f821691505b6020821081141561338f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b03811182821017156133ba576133ba613443565b6040525050565b60006001600160801b03808316818114156133de576133de613417565b6001019392505050565b60006000198214156133fc576133fc613417565b5060010190565b6000826134125761341261342d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561346e57600481823e5160e01c5b90565b600060443d101561347f5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156134ae57505050505090565b82850191508151818111156134c65750505050505090565b843d87010160208285010111156134e05750505050505090565b6134ef60208286010187613395565b509095945050505050565b6001600160e01b0319811681146115fe57600080fdfef0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9516d5741665146467770747a5255436446326342464a686342326766484a4d64375451743634645a5579736b335268747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42a2646970667358221220057474e67444bd9b2f5d44a42edf804620f3893995b4181538f575dd3ec3d67e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "contractURI()": {
        "returns": {
          "_0": "the contract URI hash"
        }
      },
      "convertV1TokenId(uint256)": {
        "params": {
          "_tokenId": "the tokenId to look up"
        }
      },
      "createTiers((uint256,address,uint256,uint16)[],string[][])": {
        "details": "It auto increments the index of the next tier to add.",
        "params": {
          "newTiers": "Information about the new tiers to add.",
          "tierHashes": "Metadata hashes belonging to the tiers. Requirements:  - Caller must have the {ADMIN} role"
        }
      },
      "getOwnedTokens(address)": {
        "details": "It uses a EnumerableSet to store values and loops over each element to add to the array.Can be costly if calling within a contract for address with many tokens.",
        "returns": {
          "owned_": "the array of tokenIDs owned by the address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenTierId(uint256)": {
        "params": {
          "tokenId": "ID of the token to get Tier info."
        },
        "returns": {
          "tierId_": "the index of the tier the tokenId belongs to",
          "tierTokenId_": "the tokenId in tier"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(bytes)": {
        "params": {
          "data": "Bytes to init the token with."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint128,uint128)": {
        "params": {
          "owner": "The owner of the new token. Requirements:  - Caller must be an authorized minter",
          "tierIndex": "Tier to mint token on."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setContractURIHash(string)": {
        "params": {
          "contractURIHash": "The hash to the initial contract level metadata."
        }
      },
      "setURI(string)": {
        "details": "See {_setURI}. Requirements: - `newURI` must be prepended with a forward slash (/)"
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "the identifier of the interface"
        },
        "returns": {
          "_0": "bool stating whether or not our interface is supported"
        }
      },
      "tokenBaseLoanSize(uint256)": {
        "params": {
          "tokenId": "ID of the token to get info."
        }
      },
      "tokenContributionAsset(uint256)": {
        "params": {
          "tokenId": "ID of the token to get info."
        }
      },
      "tokenContributionMultiplier(uint256)": {
        "params": {
          "tokenId": "ID of the token to get info."
        }
      },
      "tokenContributionSize(uint256)": {
        "params": {
          "tokenId": "ID of the token to get info."
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "The contract metadata URI."
      },
      "convertV1TokenId(uint256)": {
        "notice": "it performs a reverse look up on by finding our ID using the tokenURI hash using the NFT dictionary. Required that the token id exists"
      },
      "createTiers((uint256,address,uint256,uint16)[],string[][])": {
        "notice": "Creates new Tiers to be minted with the given information."
      },
      "getOwnedTokens(address)": {
        "notice": "It returns an array of token IDs owned by an address."
      },
      "getTokenTierId(uint256)": {
        "notice": "It returns information about a Tier for a token ID."
      },
      "initialize(bytes)": {
        "notice": "Initializes the TellerNFT."
      },
      "mint(address,uint128,uint128)": {
        "notice": "It mints a new token for a Tier index."
      },
      "setContractURIHash(string)": {
        "notice": "Sets the contract level metadata URI hash."
      },
      "supportsInterface(bytes4)": {
        "notice": "checks if an interface is supported by ITellerNFT or AccessControlUpgradeable"
      },
      "tokenBaseLoanSize(uint256)": {
        "notice": "It returns Base Loan Size for a token ID."
      },
      "tokenContributionAsset(uint256)": {
        "notice": "It returns Contribution Asset for a token ID."
      },
      "tokenContributionMultiplier(uint256)": {
        "notice": "It returns Contribution Multiplier for a token ID."
      },
      "tokenContributionSize(uint256)": {
        "notice": "It returns Contribution Size for a token ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5253,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5256,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8778,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9027,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5322,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5328,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5330,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 6404,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 4813,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4808_storage)"
      },
      {
        "astId": 5121,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 24602,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "totalSupply",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 24607,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "tiers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(Tier)24600_storage)"
      },
      {
        "astId": 24609,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "tierCount",
        "offset": 0,
        "slot": "203",
        "type": "t_uint128"
      },
      {
        "astId": 24613,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "tierTokenCount",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint128,t_uint256)"
      },
      {
        "astId": 24618,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_ownedTokenIds",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_struct(UintSet)12792_storage)"
      },
      {
        "astId": 24622,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_idToUriHash",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 24626,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_uriHashToId",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 24628,
        "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
        "label": "_contractURIHash",
        "offset": 0,
        "slot": "208",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)12792_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)12792_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4808_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4808_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Tier)24600_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TellerNFT_V2.Tier)",
        "numberOfBytes": "32",
        "value": "t_struct(Tier)24600_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4808_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 4805,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4807,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)12394_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 12389,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 12393,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tier)24600_storage": {
        "encoding": "inplace",
        "label": "struct TellerNFT_V2.Tier",
        "members": [
          {
            "astId": 24593,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "baseLoanSize",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24595,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "contributionAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 24597,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "contributionSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24599,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "contributionMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UintSet)12792_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 12791,
            "contract": "contracts/nft/mainnet/MainnetTellerNFT.sol:MainnetTellerNFT",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)12394_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}