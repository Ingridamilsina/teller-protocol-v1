{
  "address": "0xB49dc3f2D0179B0f0dDe86fFD56820509C18ffD6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isWrappedNativeToken",
          "type": "bool"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "loanSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "artifactName": "CollateralEscrow_V1",
  "transactionHash": "0xe2c3a9f49912ac4d0ee2823f4d3df502d3df028db9bbfe24072d7c9dc832994b",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0xB49dc3f2D0179B0f0dDe86fFD56820509C18ffD6",
    "transactionIndex": 2,
    "gasUsed": "769180",
    "logsBloom": "0x
    "blockHash": "0x2968fc3103946fb7016fdd295ac7c4a6df6cc17410a93e8c82eae0bbd9b3baa8",
    "transactionHash": "0xe2c3a9f49912ac4d0ee2823f4d3df502d3df028db9bbfe24072d7c9dc832994b",
    "logs": [],
    "blockNumber": 26947171,
    "cumulativeGasUsed": "995733",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "72974315af9eee2c5de273080157f330",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWrappedNativeToken\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"loanSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"the amount of collateral tokens to be deposited\",\"loanID\":\"the ID of the loan\"}},\"init(address,bool)\":{\"params\":{\"isWrappedNativeToken\":\"check if it's wrapped Ethereum/MATIC\",\"tokenAddress\":\"the address of the collateral token to be stored\"}},\"loanSupply(uint256)\":{\"params\":{\"loanID\":\"the respective loan ID\"},\"returns\":{\"supply_\":\"the amount in collateral of the respective loan\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"returns\":{\"supply_\":\"the total amount of collateral\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,uint256,address)\":{\"details\":\"only the TellerDiamond can make this call on behalf of the borrower\",\"params\":{\"amount\":\"number of collateral tokens to send\",\"loanID\":\"identifier of the loan\",\"receiver\":\"payable address to transfer money to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256)\":{\"notice\":\"it deposits an amount of the respective collateral token into the escrow\"},\"init(address,bool)\":{\"notice\":\"it initializes an escrow\"},\"loanSupply(uint256)\":{\"notice\":\"it returns the supply of collateral of the respective loan\"},\"totalSupply()\":{\"notice\":\"it returns the total supply of the collateral token held by the contract\"},\"withdraw(uint256,uint256,address)\":{\"notice\":\"it withdraws an amount of tokens in a respective loanID on behalf of the borrower\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/market/collateral/CollateralEscrow_V1.sol\":\"CollateralEscrow_V1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/market/collateral/CollateralEscrow_V1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n// Interfaces\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ICollateralEscrow } from \\\"./ICollateralEscrow.sol\\\";\\nimport { IWETH } from \\\"../../shared/interfaces/IWETH.sol\\\";\\n\\n// Libraries\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract CollateralEscrow_V1 is OwnableUpgradeable, ICollateralEscrow {\\n    mapping(uint256 => uint256) internal _balances; // loanID -> collateral\\n    address public collateralToken;\\n    bool internal _isWrappedNativeToken; // Should this be renamed to _isNetworkToken? more agnostic in cases of WMATIC\\n\\n    /**\\n     * @notice it initializes an escrow\\n     * @param tokenAddress the address of the collateral token to be stored\\n     * @param isWrappedNativeToken check if it's wrapped Ethereum/MATIC\\n     */\\n    function init(address tokenAddress, bool isWrappedNativeToken)\\n        external\\n        override\\n    {\\n        require(\\n            tokenAddress != address(0),\\n            \\\"Teller escrow: collateral token address 0\\\"\\n        );\\n\\n        OwnableUpgradeable.__Ownable_init();\\n        collateralToken = tokenAddress;\\n        _isWrappedNativeToken = isWrappedNativeToken;\\n    }\\n\\n    /**\\n     * @notice it deposits an amount of the respective collateral token into the escrow\\n     * @param loanID the ID of the loan\\n     * @param amount the amount of collateral tokens to be deposited\\n     */\\n    function deposit(uint256 loanID, uint256 amount)\\n        external\\n        payable\\n        override\\n        onlyOwner\\n    {\\n        if (_isWrappedNativeToken && msg.value > 0) {\\n            require(msg.value == amount, \\\"Teller: incorrect eth deposit\\\");\\n            IWETH(collateralToken).deposit{ value: msg.value }();\\n        } else {\\n            SafeERC20.safeTransferFrom(\\n                IERC20(collateralToken),\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n        }\\n\\n        _balances[loanID] += amount;\\n    }\\n\\n    /**\\n     * @notice it withdraws an amount of tokens in a respective loanID on behalf of the borrower\\n     * @dev only the TellerDiamond can make this call on behalf of the borrower\\n     * @param loanID identifier of the loan\\n     * @param amount number of collateral tokens to send\\n     * @param receiver payable address to transfer money to\\n     */\\n    function withdraw(\\n        uint256 loanID,\\n        uint256 amount,\\n        address payable receiver\\n    ) external override onlyOwner {\\n        require(\\n            _balances[loanID] >= amount,\\n            \\\"Teller escrow: Insufficient collateral balance\\\"\\n        );\\n\\n        SafeERC20.safeTransfer(IERC20(collateralToken), receiver, amount);\\n        _balances[loanID] -= amount;\\n    }\\n\\n    /**\\n     * @notice it returns the supply of collateral of the respective loan\\n     * @param loanID the respective loan ID\\n     * @return supply_ the amount in collateral of the respective loan\\n     */\\n    function loanSupply(uint256 loanID)\\n        external\\n        view\\n        override\\n        returns (uint256 supply_)\\n    {\\n        supply_ = _balances[loanID];\\n    }\\n\\n    /**\\n     * @notice it returns the total supply of the collateral token held by the contract\\n     * @return supply_ the total amount of collateral\\n     */\\n    function totalSupply() external view override returns (uint256 supply_) {\\n        supply_ = IERC20(collateralToken).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x40e9fc6a37e8ada5a1f377b7b45f103da74af07cd8ed3d43acbcbe33547086bd\",\"license\":\"MIT\"},\"contracts/market/collateral/ICollateralEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollateralEscrow {\\n    /**\\n     * @notice it initializes an escrow\\n     * @param tokenAddress the address of the collateral token to be stored\\n     * @param isWETH check if it's wrapped Ethereum\\n     */\\n    function init(address tokenAddress, bool isWETH) external;\\n\\n    /**\\n     * @notice it deposits an amount of the respective collateral token into the escrow\\n     * @param loanID the ID of the loan\\n     * @param amount the amount of collateral tokens to be deposited\\n     */\\n    function deposit(uint256 loanID, uint256 amount) external payable;\\n\\n    /**\\n     * @notice it withdraws an amount of tokens in a respective loanID on behalf of the borrower\\n     * @dev only the TellerDiamond can make this call on behalf of the borrower\\n     * @param loanID identifier of the loan\\n     * @param amount number of collateral tokens to send\\n     * @param receiver payable address to transfer money to\\n     */\\n    function withdraw(\\n        uint256 loanID,\\n        uint256 amount,\\n        address payable receiver\\n    ) external;\\n\\n    /**\\n     * @notice it returns the supply of the respective loan\\n     * @param loanID the respective loan ID\\n     * @return supply_ the amount in collateral of the respective loan\\n     */\\n    function loanSupply(uint256 loanID) external view returns (uint256 supply_);\\n\\n    /**\\n     * @notice it returns the total supply of the collateral token held by the contract\\n     * @return supply_ the total amount of collateral\\n     */\\n    function totalSupply() external view returns (uint256 supply_);\\n}\\n\",\"keccak256\":\"0x900fed2311f919ba1451a6583ddbf9f3bc8afa8f5189500fff51f0c049258ed3\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice It is the interface of functions that we use for the canonical WETH contract.\\n *\\n * @author develop@teller.finance\\n */\\ninterface IWETH {\\n    /**\\n     * @notice It withdraws ETH from the contract by sending it to the caller and reducing the caller's internal balance of WETH.\\n     * @param amount The amount of ETH to withdraw.\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice It deposits ETH into the contract and increases the caller's internal balance of WETH.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice It gets the ETH deposit balance of an {account}.\\n     * @param account Address to get balance of.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x87169a67e37de400b6fa85dd7dbe8a882360033be9ae21a6788ce4ebbba4bbd5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cf4806100206000396000f3fe6080604052600436106100865760003560e01c8063b2016bd411610059578063b2016bd41461011c578063cb9fa3661461013c578063d17b71d71461015c578063e2bbb15814610189578063f2fde38b1461019c57600080fd5b80630ad58d2f1461008b57806318160ddd146100ad578063715018a6146100d55780638da5cb5b146100ea575b600080fd5b34801561009757600080fd5b506100ab6100a6366004610b20565b6101bc565b005b3480156100b957600080fd5b506100c26102a3565b6040519081526020015b60405180910390f35b3480156100e157600080fd5b506100ab610324565b3480156100f657600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016100cc565b34801561012857600080fd5b50606654610104906001600160a01b031681565b34801561014857600080fd5b506100ab610157366004610a7b565b61035a565b34801561016857600080fd5b506100c2610177366004610acf565b60009081526065602052604090205490565b6100ab610197366004610aff565b6103f7565b3480156101a857600080fd5b506100ab6101b7366004610a5f565b61053b565b6033546001600160a01b031633146101ef5760405162461bcd60e51b81526004016101e690610bf5565b60405180910390fd5b6000838152606560205260409020548211156102645760405162461bcd60e51b815260206004820152602e60248201527f54656c6c657220657363726f773a20496e73756666696369656e7420636f6c6c60448201526d61746572616c2062616c616e636560901b60648201526084016101e6565b60665461027b906001600160a01b031682846105d6565b60008381526065602052604081208054849290610299908490610c42565b9091555050505050565b6066546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156102e757600080fd5b505afa1580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190610ae7565b905090565b6033546001600160a01b0316331461034e5760405162461bcd60e51b81526004016101e690610bf5565b610358600061063e565b565b6001600160a01b0382166103c25760405162461bcd60e51b815260206004820152602960248201527f54656c6c657220657363726f773a20636f6c6c61746572616c20746f6b656e2060448201526806164647265737320360bc1b60648201526084016101e6565b6103ca610690565b60668054911515600160a01b026001600160a81b03199092166001600160a01b0390931692909217179055565b6033546001600160a01b031633146104215760405162461bcd60e51b81526004016101e690610bf5565b606654600160a01b900460ff16801561043a5750600034115b156104fc5780341461048e5760405162461bcd60e51b815260206004820152601d60248201527f54656c6c65723a20696e636f727265637420657468206465706f73697400000060448201526064016101e6565b606660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b5050505050610514565b606654610514906001600160a01b031633308461070b565b60008281526065602052604081208054839290610532908490610c2a565b90915550505050565b6033546001600160a01b031633146105655760405162461bcd60e51b81526004016101e690610bf5565b6001600160a01b0381166105ca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101e6565b6105d38161063e565b50565b6040516001600160a01b03831660248201526044810182905261063990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610749565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16806106a9575060005460ff16155b6106c55760405162461bcd60e51b81526004016101e690610ba7565b600054610100900460ff161580156106e7576000805461ffff19166101011790555b6106ef61081b565b6106f7610885565b80156105d3576000805461ff001916905550565b6040516001600160a01b03808516602483015283166044820152606481018290526107439085906323b872dd60e01b90608401610602565b50505050565b600061079e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108e59092919063ffffffff16565b80519091501561063957808060200190518101906107bc9190610ab3565b6106395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101e6565b600054610100900460ff1680610834575060005460ff16155b6108505760405162461bcd60e51b81526004016101e690610ba7565b600054610100900460ff161580156106f7576000805461ffff191661010117905580156105d3576000805461ff001916905550565b600054610100900460ff168061089e575060005460ff16155b6108ba5760405162461bcd60e51b81526004016101e690610ba7565b600054610100900460ff161580156108dc576000805461ffff19166101011790555b6106f73361063e565b60606108f484846000856108fe565b90505b9392505050565b60608247101561095f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101e6565b843b6109ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101e6565b600080866001600160a01b031685876040516109c99190610b58565b60006040518083038185875af1925050503d8060008114610a06576040519150601f19603f3d011682016040523d82523d6000602084013e610a0b565b606091505b5091509150610a1b828286610a26565b979650505050505050565b60608315610a355750816108f7565b825115610a455782518084602001fd5b8160405162461bcd60e51b81526004016101e69190610b74565b600060208284031215610a70578081fd5b81356108f781610c9b565b60008060408385031215610a8d578081fd5b8235610a9881610c9b565b91506020830135610aa881610cb0565b809150509250929050565b600060208284031215610ac4578081fd5b81516108f781610cb0565b600060208284031215610ae0578081fd5b5035919050565b600060208284031215610af8578081fd5b5051919050565b60008060408385031215610b11578182fd5b50508035926020909101359150565b600080600060608486031215610b34578081fd5b83359250602084013591506040840135610b4d81610c9b565b809150509250925092565b60008251610b6a818460208701610c59565b9190910192915050565b6020815260008251806020840152610b93816040850160208701610c59565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610c3d57610c3d610c85565b500190565b600082821015610c5457610c54610c85565b500390565b60005b83811015610c74578181015183820152602001610c5c565b838111156107435750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146105d357600080fd5b80151581146105d357600080fdfea2646970667358221220b5205c830762606f85e5b484d727439ee65fd5f6f0f9a0b0c67a7d375847f41664736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063b2016bd411610059578063b2016bd41461011c578063cb9fa3661461013c578063d17b71d71461015c578063e2bbb15814610189578063f2fde38b1461019c57600080fd5b80630ad58d2f1461008b57806318160ddd146100ad578063715018a6146100d55780638da5cb5b146100ea575b600080fd5b34801561009757600080fd5b506100ab6100a6366004610b20565b6101bc565b005b3480156100b957600080fd5b506100c26102a3565b6040519081526020015b60405180910390f35b3480156100e157600080fd5b506100ab610324565b3480156100f657600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016100cc565b34801561012857600080fd5b50606654610104906001600160a01b031681565b34801561014857600080fd5b506100ab610157366004610a7b565b61035a565b34801561016857600080fd5b506100c2610177366004610acf565b60009081526065602052604090205490565b6100ab610197366004610aff565b6103f7565b3480156101a857600080fd5b506100ab6101b7366004610a5f565b61053b565b6033546001600160a01b031633146101ef5760405162461bcd60e51b81526004016101e690610bf5565b60405180910390fd5b6000838152606560205260409020548211156102645760405162461bcd60e51b815260206004820152602e60248201527f54656c6c657220657363726f773a20496e73756666696369656e7420636f6c6c60448201526d61746572616c2062616c616e636560901b60648201526084016101e6565b60665461027b906001600160a01b031682846105d6565b60008381526065602052604081208054849290610299908490610c42565b9091555050505050565b6066546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156102e757600080fd5b505afa1580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190610ae7565b905090565b6033546001600160a01b0316331461034e5760405162461bcd60e51b81526004016101e690610bf5565b610358600061063e565b565b6001600160a01b0382166103c25760405162461bcd60e51b815260206004820152602960248201527f54656c6c657220657363726f773a20636f6c6c61746572616c20746f6b656e2060448201526806164647265737320360bc1b60648201526084016101e6565b6103ca610690565b60668054911515600160a01b026001600160a81b03199092166001600160a01b0390931692909217179055565b6033546001600160a01b031633146104215760405162461bcd60e51b81526004016101e690610bf5565b606654600160a01b900460ff16801561043a5750600034115b156104fc5780341461048e5760405162461bcd60e51b815260206004820152601d60248201527f54656c6c65723a20696e636f727265637420657468206465706f73697400000060448201526064016101e6565b606660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b5050505050610514565b606654610514906001600160a01b031633308461070b565b60008281526065602052604081208054839290610532908490610c2a565b90915550505050565b6033546001600160a01b031633146105655760405162461bcd60e51b81526004016101e690610bf5565b6001600160a01b0381166105ca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101e6565b6105d38161063e565b50565b6040516001600160a01b03831660248201526044810182905261063990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610749565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16806106a9575060005460ff16155b6106c55760405162461bcd60e51b81526004016101e690610ba7565b600054610100900460ff161580156106e7576000805461ffff19166101011790555b6106ef61081b565b6106f7610885565b80156105d3576000805461ff001916905550565b6040516001600160a01b03808516602483015283166044820152606481018290526107439085906323b872dd60e01b90608401610602565b50505050565b600061079e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108e59092919063ffffffff16565b80519091501561063957808060200190518101906107bc9190610ab3565b6106395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101e6565b600054610100900460ff1680610834575060005460ff16155b6108505760405162461bcd60e51b81526004016101e690610ba7565b600054610100900460ff161580156106f7576000805461ffff191661010117905580156105d3576000805461ff001916905550565b600054610100900460ff168061089e575060005460ff16155b6108ba5760405162461bcd60e51b81526004016101e690610ba7565b600054610100900460ff161580156108dc576000805461ffff19166101011790555b6106f73361063e565b60606108f484846000856108fe565b90505b9392505050565b60608247101561095f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101e6565b843b6109ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101e6565b600080866001600160a01b031685876040516109c99190610b58565b60006040518083038185875af1925050503d8060008114610a06576040519150601f19603f3d011682016040523d82523d6000602084013e610a0b565b606091505b5091509150610a1b828286610a26565b979650505050505050565b60608315610a355750816108f7565b825115610a455782518084602001fd5b8160405162461bcd60e51b81526004016101e69190610b74565b600060208284031215610a70578081fd5b81356108f781610c9b565b60008060408385031215610a8d578081fd5b8235610a9881610c9b565b91506020830135610aa881610cb0565b809150509250929050565b600060208284031215610ac4578081fd5b81516108f781610cb0565b600060208284031215610ae0578081fd5b5035919050565b600060208284031215610af8578081fd5b5051919050565b60008060408385031215610b11578182fd5b50508035926020909101359150565b600080600060608486031215610b34578081fd5b83359250602084013591506040840135610b4d81610c9b565b809150509250925092565b60008251610b6a818460208701610c59565b9190910192915050565b6020815260008251806020840152610b93816040850160208701610c59565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610c3d57610c3d610c85565b500190565b600082821015610c5457610c54610c85565b500390565b60005b83811015610c74578181015183820152602001610c5c565b838111156107435750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146105d357600080fd5b80151581146105d357600080fdfea2646970667358221220b5205c830762606f85e5b484d727439ee65fd5f6f0f9a0b0c67a7d375847f41664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "the amount of collateral tokens to be deposited",
          "loanID": "the ID of the loan"
        }
      },
      "init(address,bool)": {
        "params": {
          "isWrappedNativeToken": "check if it's wrapped Ethereum/MATIC",
          "tokenAddress": "the address of the collateral token to be stored"
        }
      },
      "loanSupply(uint256)": {
        "params": {
          "loanID": "the respective loan ID"
        },
        "returns": {
          "supply_": "the amount in collateral of the respective loan"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "returns": {
          "supply_": "the total amount of collateral"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,uint256,address)": {
        "details": "only the TellerDiamond can make this call on behalf of the borrower",
        "params": {
          "amount": "number of collateral tokens to send",
          "loanID": "identifier of the loan",
          "receiver": "payable address to transfer money to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256)": {
        "notice": "it deposits an amount of the respective collateral token into the escrow"
      },
      "init(address,bool)": {
        "notice": "it initializes an escrow"
      },
      "loanSupply(uint256)": {
        "notice": "it returns the supply of collateral of the respective loan"
      },
      "totalSupply()": {
        "notice": "it returns the total supply of the collateral token held by the contract"
      },
      "withdraw(uint256,uint256,address)": {
        "notice": "it withdraws an amount of tokens in a respective loanID on behalf of the borrower"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5253,
        "contract": "contracts/market/collateral/CollateralEscrow_V1.sol:CollateralEscrow_V1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5256,
        "contract": "contracts/market/collateral/CollateralEscrow_V1.sol:CollateralEscrow_V1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8778,
        "contract": "contracts/market/collateral/CollateralEscrow_V1.sol:CollateralEscrow_V1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5133,
        "contract": "contracts/market/collateral/CollateralEscrow_V1.sol:CollateralEscrow_V1",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5246,
        "contract": "contracts/market/collateral/CollateralEscrow_V1.sol:CollateralEscrow_V1",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21644,
        "contract": "contracts/market/collateral/CollateralEscrow_V1.sol:CollateralEscrow_V1",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 21646,
        "contract": "contracts/market/collateral/CollateralEscrow_V1.sol:CollateralEscrow_V1",
        "label": "collateralToken",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 21648,
        "contract": "contracts/market/collateral/CollateralEscrow_V1.sol:CollateralEscrow_V1",
        "label": "_isWrappedNativeToken",
        "offset": 20,
        "slot": "102",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}